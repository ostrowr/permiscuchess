{"version":3,"sources":["../webpack/bootstrap","../node_modules/chess.js/chess.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","engine/game.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","engine/utils.ts","engine/worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Chess","fen","BLACK","WHITE","EMPTY","PAWN","BISHOP","KING","DEFAULT_POSITION","POSSIBLE_RESULTS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","q","k","ATTACKS","RAYS","SHIFTS","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","board","Array","kings","turn","castling","ep_square","half_moves","move_number","history","header","comments","clear","keep_headers","update_setup","generate_fen","prune_comments","reversed_history","current_comments","copy_comment","length","push","undo_move","make_move","pop","reset","load","tokens","split","position","validate_fen","valid","piece","charAt","indexOf","parseInt","color","put","type","toLowerCase","algebraic","errors","error_number","error","isNaN","test","rows","sum_fields","previous_was_number","empty","toUpperCase","cflags","epflags","join","set_header","args","sq","build_move","from","to","flags","promotion","move","captured","generate_moves","options","add_move","moves","rank","pieces","len","us","them","swap_color","second_rank","first_sq","last_sq","single_square","legal","j","offset","castling_to","castling_from","attacked","legal_moves","king_attacked","move_to_san","sloppy","output","disambiguator","ambiguities","same_rank","same_file","ambig_from","ambig_to","file","get_disambiguator","in_check","in_checkmate","stripped_san","replace","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","slice","old","move_from_san","clean_move","matches","match","f","substring","make_pretty","ugly_move","clone","san","obj","dupe","trim","str","perft","depth","nodes","KNIGHT","ROOK","QUEEN","keys","ugly_moves","verbose","in_draw","game_over","row","pgn","newline","newline_char","max_width","result","header_exists","append_comment","move_string","comment","delimiter","Result","strip","wrap_comment","width","token","current_width","includes","load_pgn","mask","header_regex","RegExp","header_string","exec","headers","header_obj","parse_pgn_header","encode_comment","string","map","charCodeAt","toString","encodeURIComponent","to_hex","decode_comment","startsWith","endsWith","decodeURIComponent","from_hex","ms","bracket","semicolon","undefined","rav_regex","half_move","has_keys","arguments","ascii","move_obj","pretty_move","undo","remove","square_color","sq_0x88","move_history","get_comment","set_comment","delete_comment","get_comments","delete_comments","define","unsupportedIterableToArray","allowArrayLike","it","iterator","isArray","F","done","e","_e","TypeError","err","normalCompletion","didErr","step","next","_e2","arrayLikeToArray","minLen","constructor","arr","arr2","_defineProperty","configurable","writable","_defineProperties","target","props","descriptor","Squares","Permiscuchess","instance","Constructor","game","this","pa","pb","pc","pd","pe","pf","pg","ph","ra","rh","nb","ng","bc","bf","protoProps","staticProps","mv","oldPosition","destinationIsOnLastRank","destination","isPawn","whiteMoves","blackMoves","ix","availableMoves","nLoopsAround","moveIx","outcome","reason","find","_arrayLikeToArray","_toConsumableArray","iter","ALL_POSSIBLE_MOVES","flatMap","pieceId","randomStrategy","inArr","outArr","Math","floor","random","shuffled","onmessage","msg","blackStrategy","data","whiteStrategy","play","messageToReturn","by","postMessage"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,qBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,kBAIjBlC,EAAoBA,EAAoBmC,EAAI,G,+BCvDjDC,EAAQ,SAASC,GACnB,IAAIC,EAAQ,IACRC,EAAQ,IAERC,GAAS,EAETC,EAAO,IAEPC,EAAS,IAGTC,EAAO,IAIPC,EACF,2DAEEC,EAAmB,CAAC,MAAO,MAAO,UAAW,KAE7CC,EAAe,CACjBC,EAAG,CAAC,GAAI,GAAI,GAAI,IAChBC,EAAG,EAAE,IAAK,IAAK,IAAK,KAGlBC,EAAgB,CAClBpB,EAAG,EAAE,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IACpCkB,EAAG,EAAE,IAAK,GAAI,GAAI,IAClB7B,EAAG,EAAE,GAAI,EAAG,IAAK,GACjBgC,EAAG,EAAE,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,GACnCC,EAAG,EAAE,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAIjCC,EAAU,CACZ,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,EAC/C,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAC/C,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,GAAK,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAC/C,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,GAAK,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAC/C,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,GAAK,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAC/C,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,GAAK,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAC/C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAK,EAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAC/C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC/C,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,GAAK,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAC/C,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,GAAK,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAC/C,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,GAAK,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAC/C,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,GAAK,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAC/C,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAChD,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAI1CC,EAAO,CACR,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,GAAI,EAC3D,EAAG,GAAK,EAAI,EAAI,EAAI,EAAI,EAAG,GAAK,EAAI,EAAI,EAAI,EAAI,EAAG,GAAK,EAAG,EAC3D,EAAI,EAAG,GAAK,EAAI,EAAI,EAAI,EAAG,GAAK,EAAI,EAAI,EAAI,EAAG,GAAK,EAAI,EAAG,EAC3D,EAAI,EAAI,EAAG,GAAK,EAAI,EAAI,EAAG,GAAK,EAAI,EAAI,EAAG,GAAK,EAAI,EAAI,EAAG,EAC3D,EAAI,EAAI,EAAI,EAAG,GAAK,EAAI,EAAG,GAAK,EAAI,EAAG,GAAK,EAAI,EAAI,EAAI,EAAG,EAC3D,EAAI,EAAI,EAAI,EAAI,EAAG,GAAK,EAAG,GAAK,EAAG,GAAK,EAAI,EAAI,EAAI,EAAI,EAAG,EAC3D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,GAAI,GAAI,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,EAC3D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAAI,GAAK,GAAG,GAAI,GAAI,GAAI,EAAG,EAC3D,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAAI,IAAI,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,EAC3D,EAAI,EAAI,EAAI,EAAI,GAAG,GAAK,GAAG,GAAK,GAAG,GAAK,EAAI,EAAI,EAAI,EAAI,EAAG,EAC3D,EAAI,EAAI,EAAI,GAAG,GAAK,EAAI,GAAG,GAAK,EAAI,GAAG,GAAK,EAAI,EAAI,EAAI,EAAG,EAC3D,EAAI,EAAI,GAAG,GAAK,EAAI,EAAI,GAAG,GAAK,EAAI,EAAI,GAAG,GAAK,EAAI,EAAI,EAAG,EAC3D,EAAI,GAAG,GAAK,EAAI,EAAI,EAAI,GAAG,GAAK,EAAI,EAAI,EAAI,GAAG,GAAK,EAAI,EAAG,EAC3D,GAAG,GAAK,EAAI,EAAI,EAAI,EAAI,GAAG,GAAK,EAAI,EAAI,EAAI,EAAI,GAAG,GAAK,EAAG,GAC5D,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAGvDC,EAAS,CAAEpB,EAAG,EAAGL,EAAG,EAAGkB,EAAG,EAAG7B,EAAG,EAAGgC,EAAG,EAAGC,EAAG,GAE5CI,EAAQ,CACVC,OAAQ,IACRC,QAAS,IACTC,SAAU,IACVC,WAAY,IACZC,UAAW,IACXC,aAAc,IACdC,aAAc,KAGZC,EAAO,CACTP,OAAQ,EACRC,QAAS,EACTC,SAAU,EACVC,WAAY,EACZC,UAAW,GACXC,aAAc,GACdC,aAAc,IAaZE,EAAU,CACZC,GAAM,EAAGC,GAAM,EAAGC,GAAM,EAAGC,GAAM,EAAGC,GAAM,EAAGC,GAAM,EAAGC,GAAM,EAAGC,GAAM,EACrEC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GACpEC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GACpEC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GACpEC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GACpEC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GACpEC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAK,GAAIC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IACnEC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,GAAI,KAGjEC,EAAQ,CACVjF,EAAG,CACD,CAAEkF,OAAQlE,EAAQyD,GAAIU,KAAMpE,EAAKD,cACjC,CAAEoE,OAAQlE,EAAQgE,GAAIG,KAAMpE,EAAKF,eAEnCd,EAAG,CACD,CAAEmF,OAAQlE,EAAQC,GAAIkE,KAAMpE,EAAKD,cACjC,CAAEoE,OAAQlE,EAAQQ,GAAI2D,KAAMpE,EAAKF,gBAIjCuE,EAAQ,IAAIC,MAAM,KAClBC,EAAQ,CAAEtF,EAAGR,EAAOO,EAAGP,GACvB+F,EAAOhG,EACPiG,EAAW,CAAExF,EAAG,EAAGD,EAAG,GACtB0F,EAAYjG,EACZkG,EAAa,EACbC,EAAc,EACdC,EAAU,GACVC,EAAS,GACTC,EAAW,GAWf,SAASC,EAAMC,GACe,qBAAjBA,IACTA,GAAe,GAGjBZ,EAAQ,IAAIC,MAAM,KAClBC,EAAQ,CAAEtF,EAAGR,EAAOO,EAAGP,GACvB+F,EAAOhG,EACPiG,EAAW,CAAExF,EAAG,EAAGD,EAAG,GACtB0F,EAAYjG,EACZkG,EAAa,EACbC,EAAc,EACdC,EAAU,GACLI,IAAcH,EAAS,IAC5BC,EAAW,GACXG,EAAaC,KAGf,SAASC,IAQP,IAPA,IAAIC,EAAmB,GACnBC,EAAmB,GACnBC,EAAe,SAASjH,GACtBA,KAAOyG,IACTO,EAAiBhH,GAAOyG,EAASzG,KAG9BuG,EAAQW,OAAS,GACtBH,EAAiBI,KAAKC,KAGxB,IADAH,EAAaJ,KACNE,EAAiBG,OAAS,GAC/BG,EAAUN,EAAiBO,OAC3BL,EAAaJ,KAEfJ,EAAWO,EAGb,SAASO,IACPC,EAAKjH,GAGP,SAASiH,EAAKxH,EAAK2G,GACW,qBAAjBA,IACTA,GAAe,GAGjB,IAAIc,EAASzH,EAAI0H,MAAM,OACnBC,EAAWF,EAAO,GAClB5B,EAAS,EAEb,IAAK+B,EAAa5H,GAAK6H,MACrB,OAAO,EAGTnB,EAAMC,GAEN,IAAK,IAAI5I,EAAI,EAAGA,EAAI4J,EAAST,OAAQnJ,IAAK,CACxC,IAAI+J,EAAQH,EAASI,OAAOhK,GAE5B,GAAc,MAAV+J,EACFjC,GAAU,OACL,IAy7B2B,IAA7B,aAAamC,QAz7BEF,GAClBjC,GAAUoC,SAASH,EAAO,QACrB,CACL,IAAII,EAAQJ,EAAQ,IAAM5H,EAAQD,EAClCkI,EAAI,CAAEC,KAAMN,EAAMO,cAAeH,MAAOA,GAASI,GAAUzC,IAC3DA,KAyBJ,OArBAK,EAAOuB,EAAO,GAEVA,EAAO,GAAGO,QAAQ,MAAQ,IAC5B7B,EAASxF,GAAKe,EAAKF,cAEjBiG,EAAO,GAAGO,QAAQ,MAAQ,IAC5B7B,EAASxF,GAAKe,EAAKD,cAEjBgG,EAAO,GAAGO,QAAQ,MAAQ,IAC5B7B,EAASzF,GAAKgB,EAAKF,cAEjBiG,EAAO,GAAGO,QAAQ,MAAQ,IAC5B7B,EAASzF,GAAKgB,EAAKD,cAGrB2E,EAA0B,MAAdqB,EAAO,GAAatH,EAAQwB,EAAQ8F,EAAO,IACvDpB,EAAa4B,SAASR,EAAO,GAAI,IACjCnB,EAAc2B,SAASR,EAAO,GAAI,IAElCb,EAAaC,MAEN,EAQT,SAASe,EAAa5H,GACpB,IAAIuI,EACC,aADDA,EAEC,sDAFDA,EAGC,sDAHDA,EAIC,gEAJDA,EAKC,4CALDA,EAMC,gDANDA,EAOC,uCAPDA,EAQC,qEARDA,EASC,gEATDA,EAUC,0DAVDA,EAWE,0DAXFA,EAYE,4BAIFd,EAASzH,EAAI0H,MAAM,OACvB,GAAsB,IAAlBD,EAAOP,OACT,MAAO,CAAEW,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAIjD,GAAIG,MAAMjB,EAAO,KAAOQ,SAASR,EAAO,GAAI,KAAO,EACjD,MAAO,CAAEI,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAIjD,GAAIG,MAAMjB,EAAO,KAAOQ,SAASR,EAAO,GAAI,IAAM,EAChD,MAAO,CAAEI,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAIjD,IAAK,uBAAuBI,KAAKlB,EAAO,IACtC,MAAO,CAAEI,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAIjD,IAAK,4BAA4BI,KAAKlB,EAAO,IAC3C,MAAO,CAAEI,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAIjD,IAAK,UAAUI,KAAKlB,EAAO,IACzB,MAAO,CAAEI,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAIjD,IAAIK,EAAOnB,EAAO,GAAGC,MAAM,KAC3B,GAAoB,IAAhBkB,EAAK1B,OACP,MAAO,CAAEW,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAIjD,IAAK,IAAIxK,EAAI,EAAGA,EAAI6K,EAAK1B,OAAQnJ,IAAK,CAKpC,IAHA,IAAI8K,EAAa,EACbC,GAAsB,EAEjBhI,EAAI,EAAGA,EAAI8H,EAAK7K,GAAGmJ,OAAQpG,IAClC,GAAK4H,MAAME,EAAK7K,GAAG+C,IAMZ,CACL,IAAK,mBAAmB6H,KAAKC,EAAK7K,GAAG+C,IACnC,MAAO,CAAE+G,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAEjDM,GAAc,EACdC,GAAsB,MAXA,CACtB,GAAIA,EACF,MAAO,CAAEjB,OAAO,EAAOW,aAAc,EAAGC,MAAOF,GAEjDM,GAAcZ,SAASW,EAAK7K,GAAG+C,GAAI,IACnCgI,GAAsB,EAS1B,GAAmB,IAAfD,EACF,MAAO,CAAEhB,OAAO,EAAOW,aAAc,GAAIC,MAAOF,GAIpD,MACmB,KAAhBd,EAAO,GAAG,IAA0B,KAAbA,EAAO,IACd,KAAhBA,EAAO,GAAG,IAA0B,KAAbA,EAAO,GAExB,CAAEI,OAAO,EAAOW,aAAc,GAAIC,MAAOF,GAI3C,CAAEV,OAAO,EAAMW,aAAc,EAAGC,MAAOF,GAGhD,SAAS1B,IAIP,IAHA,IAAIkC,EAAQ,EACR/I,EAAM,GAEDjC,EAAI4D,EAAQC,GAAI7D,GAAK4D,EAAQgE,GAAI5H,IAAK,CAC7C,GAAgB,MAAZgI,EAAMhI,GACRgL,QACK,CACDA,EAAQ,IACV/I,GAAO+I,EACPA,EAAQ,GAEV,IAAIb,EAAQnC,EAAMhI,GAAGmK,MACjBJ,EAAQ/B,EAAMhI,GAAGqK,KAErBpI,GAAOkI,IAAUhI,EAAQ4H,EAAMkB,cAAgBlB,EAAMO,cAGlDtK,EAAI,EAAK,MACRgL,EAAQ,IACV/I,GAAO+I,GAGLhL,IAAM4D,EAAQgE,KAChB3F,GAAO,KAGT+I,EAAQ,EACRhL,GAAK,GAIT,IAAIkL,EAAS,GACT9C,EAAQ,EAAUzE,EAAKF,eACzByH,GAAU,KAER9C,EAAQ,EAAUzE,EAAKD,eACzBwH,GAAU,KAER9C,EAAQ,EAAUzE,EAAKF,eACzByH,GAAU,KAER9C,EAAQ,EAAUzE,EAAKD,eACzBwH,GAAU,KAIZA,EAASA,GAAU,IACnB,IAAIC,EAAU9C,IAAcjG,EAAQ,IAAMmI,GAAUlC,GAEpD,MAAO,CAACpG,EAAKkG,EAAM+C,EAAQC,EAAS7C,EAAYC,GAAa6C,KAAK,KAGpE,SAASC,EAAWC,GAClB,IAAK,IAAItL,EAAI,EAAGA,EAAIsL,EAAKnC,OAAQnJ,GAAK,EACb,kBAAZsL,EAAKtL,IAA0C,kBAAhBsL,EAAKtL,EAAI,KACjDyI,EAAO6C,EAAKtL,IAAMsL,EAAKtL,EAAI,IAG/B,OAAOyI,EAST,SAASI,EAAa5G,GAChBuG,EAAQW,OAAS,IAEjBlH,IAAQO,GACViG,EAAM,MAAY,IAClBA,EAAM,IAAUxG,WAETwG,EAAM,aACNA,EAAM,MAIjB,SAAS5H,EAAIiH,GACX,IAAIiC,EAAQ/B,EAAMpE,EAAQkE,IAC1B,OAAOiC,EAAQ,CAAEM,KAAMN,EAAMM,KAAMF,MAAOJ,EAAMI,OAAU,KAG5D,SAASC,EAAIL,EAAOjC,GAElB,KAAM,SAAUiC,MAAS,UAAWA,GAClC,OAAO,EAIT,IAAmD,IA7ZvC,eA6ZAE,QAAQF,EAAMM,KAAKC,eAC7B,OAAO,EAIT,KAAMxC,KAAUlE,GACd,OAAO,EAGT,IAAI2H,EAAK3H,EAAQkE,GAGjB,OACEiC,EAAMM,MAAQ9H,GACZ2F,EAAM6B,EAAMI,QAAU/H,GAAS8F,EAAM6B,EAAMI,QAAUoB,KAKzDvD,EAAMuD,GAAM,CAAElB,KAAMN,EAAMM,KAAMF,MAAOJ,EAAMI,OACzCJ,EAAMM,OAAS9H,IACjB2F,EAAM6B,EAAMI,OAASoB,GAGvB1C,EAAaC,MAEN,GAeT,SAAS0C,EAAWxD,EAAOyD,EAAMC,EAAIC,EAAOC,GAC1C,IAAIC,EAAO,CACT1B,MAAOhC,EACPsD,KAAMA,EACNC,GAAIA,EACJC,MAAOA,EACP5B,MAAO/B,EAAMyD,GAAMpB,MAarB,OAVIuB,IACFC,EAAKF,OAAShI,EAAKH,UACnBqI,EAAKD,UAAYA,GAGf5D,EAAM0D,GACRG,EAAKC,SAAW9D,EAAM0D,GAAIrB,KACjBsB,EAAQhI,EAAKJ,aACtBsI,EAAKC,SAAWzJ,GAEXwJ,EAGT,SAASE,EAAeC,GACtB,SAASC,EAASjE,EAAOkE,EAAOT,EAAMC,EAAIC,GAExC,GACE3D,EAAMyD,GAAMpB,OAAShI,GAzYd,IA0YN8J,EAAKT,IAjZC,IAiZiBS,EAAKT,GAO7BQ,EAAM9C,KAAKoC,EAAWxD,EAAOyD,EAAMC,EAAIC,SAJvC,IADA,IAAIS,EAAS,CAteP,IADD,IAuesB9J,EAzepB,KA0eEtC,EAAI,EAAGqM,EAAMD,EAAOjD,OAAQnJ,EAAIqM,EAAKrM,IAC5CkM,EAAM9C,KAAKoC,EAAWxD,EAAOyD,EAAMC,EAAIC,EAAOS,EAAOpM,KAO3D,IAAIkM,EAAQ,GACRI,EAAKnE,EACLoE,EAAOC,GAAWF,GAClBG,EAAc,CAAE9J,EAzZT,EAyZoBC,EA9ZpB,GAgaP8J,EAAW9I,EAAQC,GACnB8I,EAAU/I,EAAQgE,GAClBgF,GAAgB,EAGhBC,EACiB,qBAAZb,KAA2B,UAAWA,IACzCA,EAAQa,MAId,GAAuB,qBAAZb,GAA2B,WAAYA,EAAS,CACzD,KAAIA,EAAQlE,UAAUlE,GAKpB,MAAO,GAJP8I,EAAWC,EAAU/I,EAAQoI,EAAQlE,QACrC8E,GAAgB,EAOpB,IAAK,IAAI5M,EAAI0M,EAAU1M,GAAK2M,EAAS3M,IAEnC,GAAQ,IAAJA,EACFA,GAAK,MADP,CAKA,IAAI+J,EAAQ/B,EAAMhI,GAClB,GAAa,MAAT+J,GAAiBA,EAAMI,QAAUmC,EAIrC,GAAIvC,EAAMM,OAAShI,EAAM,CAEvB,IAAIyF,EAAS9H,EAAI0C,EAAa4J,GAAI,GAClC,GAAqB,MAAjBtE,EAAMF,GAAiB,CACzBmE,EAASjE,EAAOkE,EAAOlM,EAAG8H,EAAQnE,EAAKP,QAGnC0E,EAAS9H,EAAI0C,EAAa4J,GAAI,GAC9BG,EAAYH,KAAQH,EAAKnM,IAAuB,MAAjBgI,EAAMF,IACvCmE,EAASjE,EAAOkE,EAAOlM,EAAG8H,EAAQnE,EAAKL,UAK3C,IAAKwJ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAET,KADThF,EAAS9H,EAAI0C,EAAa4J,GAAIQ,MAGb,MAAjB9E,EAAMF,IAAmBE,EAAMF,GAAQqC,QAAUoC,EACnDN,EAASjE,EAAOkE,EAAOlM,EAAG8H,EAAQnE,EAAKN,SAC9ByE,IAAWO,GACpB4D,EAASjE,EAAOkE,EAAOlM,EAAGqI,EAAW1E,EAAKJ,mBAI9C,IAAK,IAAIuJ,EAAI,EAAGT,EAAMxJ,EAAckH,EAAMM,MAAMlB,OAAQ2D,EAAIT,EAAKS,IAC/D,KAAIC,EAASlK,EAAckH,EAAMM,MAAMyC,GAGvC,IAFIhF,EAAS9H,IAIE,KADb8H,GAAUiF,KADC,CAIX,GAAqB,MAAjB/E,EAAMF,GAEH,CACL,GAAIE,EAAMF,GAAQqC,QAAUmC,EAAI,MAChCL,EAASjE,EAAOkE,EAAOlM,EAAG8H,EAAQnE,EAAKN,SACvC,MAIF,GARE4I,EAASjE,EAAOkE,EAAOlM,EAAG8H,EAAQnE,EAAKP,QAQtB,MAAf2G,EAAMM,MAA+B,MAAfN,EAAMM,KAAc,QAStD,IAAKuC,GAAiBD,IAAYzE,EAAMoE,GAAK,CAE3C,GAAIlE,EAASkE,GAAM3I,EAAKF,aAAc,CACpC,IACIuJ,GADAC,EAAgB/E,EAAMoE,IACQ,EAGJ,MAA5BtE,EAAMiF,EAAgB,IACA,MAAtBjF,EAAMgF,IACLE,EAASX,EAAMrE,EAAMoE,KACrBY,EAASX,EAAMU,EAAgB,IAC/BC,EAASX,EAAMS,IAEhBf,EAASjE,EAAOkE,EAAOhE,EAAMoE,GAAKU,EAAarJ,EAAKF,cAKxD,GAAI2E,EAASkE,GAAM3I,EAAKD,aAAc,CACpC,IAAIuJ,EACAD,GADAC,EAAgB/E,EAAMoE,IACQ,EAGJ,MAA5BtE,EAAMiF,EAAgB,IACM,MAA5BjF,EAAMiF,EAAgB,IACM,MAA5BjF,EAAMiF,EAAgB,IACrBC,EAASX,EAAMrE,EAAMoE,KACrBY,EAASX,EAAMU,EAAgB,IAC/BC,EAASX,EAAMS,IAEhBf,EAASjE,EAAOkE,EAAOhE,EAAMoE,GAAKU,EAAarJ,EAAKD,eAQ1D,IAAKmJ,EACH,OAAOX,EAIT,IAAIiB,EAAc,GAClB,IAASnN,EAAI,EAAGqM,EAAMH,EAAM/C,OAAQnJ,EAAIqM,EAAKrM,IAC3CsJ,EAAU4C,EAAMlM,IACXoN,EAAcd,IACjBa,EAAY/D,KAAK8C,EAAMlM,IAEzBqJ,IAGF,OAAO8D,EAaT,SAASE,EAAYxB,EAAMyB,GACzB,IAAIC,EAAS,GAEb,GAAI1B,EAAKF,MAAQhI,EAAKF,aACpB8J,EAAS,WACJ,GAAI1B,EAAKF,MAAQhI,EAAKD,aAC3B6J,EAAS,YACJ,CACL,IAAIC,EAyVR,SAA2B3B,EAAMyB,GAW/B,IAVA,IAAIpB,EAAQH,EAAe,CAAEc,OAAQS,IAEjC7B,EAAOI,EAAKJ,KACZC,EAAKG,EAAKH,GACV3B,EAAQ8B,EAAK9B,MAEb0D,EAAc,EACdC,EAAY,EACZC,EAAY,EAEP3N,EAAI,EAAGqM,EAAMH,EAAM/C,OAAQnJ,EAAIqM,EAAKrM,IAAK,CAChD,IAAI4N,EAAa1B,EAAMlM,GAAGyL,KACtBoC,EAAW3B,EAAMlM,GAAG0L,GAMpB3B,IALcmC,EAAMlM,GAAG+J,OAKE0B,IAASmC,GAAclC,IAAOmC,IACzDJ,IAEItB,EAAKV,KAAUU,EAAKyB,IACtBF,IAGEI,GAAKrC,KAAUqC,GAAKF,IACtBD,KAKN,GAAIF,EAAc,EAIhB,OAAIC,EAAY,GAAKC,EAAY,EACxBpD,GAAUkB,GACRkC,EAAY,EAIdpD,GAAUkB,GAAMzB,OAAO,GAGvBO,GAAUkB,GAAMzB,OAAO,GAIlC,MAAO,GA1Ye+D,CAAkBlC,EAAMyB,GAExCzB,EAAK9B,QAAU1H,IACjBkL,GAAU1B,EAAK9B,MAAMkB,cAAgBuC,GAGnC3B,EAAKF,OAAShI,EAAKN,QAAUM,EAAKJ,cAChCsI,EAAK9B,QAAU1H,IACjBkL,GAAUhD,GAAUsB,EAAKJ,MAAM,IAEjC8B,GAAU,KAGZA,GAAUhD,GAAUsB,EAAKH,IAErBG,EAAKF,MAAQhI,EAAKH,YACpB+J,GAAU,IAAM1B,EAAKD,UAAUX,eAcnC,OAVA3B,EAAUuC,GACNmC,MACEC,IACFV,GAAU,IAEVA,GAAU,KAGdlE,IAEOkE,EAIT,SAASW,EAAarC,GACpB,OAAOA,EAAKsC,QAAQ,IAAK,IAAIA,QAAQ,cAAe,IAGtD,SAASjB,EAAS/C,EAAOrC,GACvB,IAAK,IAAI9H,EAAI4D,EAAQC,GAAI7D,GAAK4D,EAAQgE,GAAI5H,IAExC,GAAQ,IAAJA,EACFA,GAAK,OAKP,GAAgB,MAAZgI,EAAMhI,IAAcgI,EAAMhI,GAAGmK,QAAUA,EAA3C,CAEA,IAAIJ,EAAQ/B,EAAMhI,GACdoO,EAAapO,EAAI8H,EACjBuG,EAAQD,EAAa,IAEzB,GAAIpL,EAAQqL,GAAU,GAAKnL,EAAO6G,EAAMM,MAAQ,CAC9C,GAAIN,EAAMM,OAAShI,EAAM,CACvB,GAAI+L,EAAa,GACf,GAAIrE,EAAMI,QAAUhI,EAAO,OAAO,OAElC,GAAI4H,EAAMI,QAAUjI,EAAO,OAAO,EAEpC,SAIF,GAAmB,MAAf6H,EAAMM,MAA+B,MAAfN,EAAMM,KAAc,OAAO,EAMrD,IAJA,IAAI0C,EAAS9J,EAAKoL,GACdvB,EAAI9M,EAAI+M,EAERuB,GAAU,EACPxB,IAAMhF,GAAQ,CACnB,GAAgB,MAAZE,EAAM8E,GAAY,CACpBwB,GAAU,EACV,MAEFxB,GAAKC,EAGP,IAAKuB,EAAS,OAAO,GAIzB,OAAO,EAGT,SAASlB,EAAcjD,GACrB,OAAO+C,EAASV,GAAWrC,GAAQjC,EAAMiC,IAG3C,SAAS6D,IACP,OAAOZ,EAAcjF,GAGvB,SAAS8F,IACP,OAAOD,KAA0C,IAA5BjC,IAAiB5C,OAGxC,SAASoF,IACP,OAAQP,KAA0C,IAA5BjC,IAAiB5C,OAGzC,SAASqF,IAMP,IALA,IAAIpC,EAAS,GACTqC,EAAU,GACVC,EAAa,EACbC,EAAW,EAEN3O,EAAI4D,EAAQC,GAAI7D,GAAK4D,EAAQgE,GAAI5H,IAExC,GADA2O,GAAYA,EAAW,GAAK,EACpB,IAAJ3O,EACFA,GAAK,MADP,CAKA,IAAI+J,EAAQ/B,EAAMhI,GACd+J,IACFqC,EAAOrC,EAAMM,MAAQN,EAAMM,QAAQ+B,EAASA,EAAOrC,EAAMM,MAAQ,EAAI,EACjEN,EAAMM,OAAS/H,GACjBmM,EAAQrF,KAAKuF,GAEfD,KAKJ,GAAmB,IAAfA,EACF,OAAO,EACF,GAEU,IAAfA,IACoB,IAAnBtC,EAAM,GAAqC,IAAnBA,EAAM,GAE/B,OAAO,EACF,GAAIsC,IAAetC,EAAM,EAAW,EAAG,CAE5C,IAAIwC,EAAM,EACNvC,EAAMoC,EAAQtF,OAClB,IAASnJ,EAAI,EAAGA,EAAIqM,EAAKrM,IACvB4O,GAAOH,EAAQzO,GAEjB,GAAY,IAAR4O,GAAaA,IAAQvC,EACvB,OAAO,EAIX,OAAO,EAGT,SAASwC,IAUP,IAJA,IAAI3C,EAAQ,GACR4C,EAAY,GACZC,GAAa,IAEJ,CACX,IAAIlD,EAAOxC,IACX,IAAKwC,EAAM,MACXK,EAAM9C,KAAKyC,GAGb,OAAa,CAGX,IAAI5J,EAAM6G,IACPa,MAAM,KACNqF,MAAM,EAAG,GACT5D,KAAK,KAQR,GALA0D,EAAU7M,GAAOA,KAAO6M,EAAYA,EAAU7M,GAAO,EAAI,EACrD6M,EAAU7M,IAAQ,IACpB8M,GAAa,IAGV7C,EAAM/C,OACT,MAEFG,EAAU4C,EAAM3C,OAGlB,OAAOwF,EAeT,SAASzF,EAAUuC,GACjB,IAAIS,EAAKnE,EACLoE,EAAOC,GAAWF,GAqBtB,GAnCF,SAAcT,GACZrD,EAAQY,KAAK,CACXyC,KAAMA,EACN3D,MAAO,CAAEvF,EAAGuF,EAAMvF,EAAGC,EAAGsF,EAAMtF,GAC9BuF,KAAMA,EACNC,SAAU,CAAEzF,EAAGyF,EAASzF,EAAGC,EAAGwF,EAASxF,GACvCyF,UAAWA,EACXC,WAAYA,EACZC,YAAaA,IAOfa,CAAKyC,GAEL7D,EAAM6D,EAAKH,IAAM1D,EAAM6D,EAAKJ,MAC5BzD,EAAM6D,EAAKJ,MAAQ,KAGfI,EAAKF,MAAQhI,EAAKJ,aAChB4E,IAASjG,EACX8F,EAAM6D,EAAKH,GAAK,IAAM,KAEtB1D,EAAM6D,EAAKH,GAAK,IAAM,MAKtBG,EAAKF,MAAQhI,EAAKH,YACpBwE,EAAM6D,EAAKH,IAAM,CAAErB,KAAMwB,EAAKD,UAAWzB,MAAOmC,IAI9CtE,EAAM6D,EAAKH,IAAIrB,OAAS9H,EAAM,CAIhC,GAHA2F,EAAMF,EAAM6D,EAAKH,IAAIvB,OAAS0B,EAAKH,GAG/BG,EAAKF,MAAQhI,EAAKF,aAAc,CAClC,IAAIuJ,EAAcnB,EAAKH,GAAK,EACxBuB,EAAgBpB,EAAKH,GAAK,EAC9B1D,EAAMgF,GAAehF,EAAMiF,GAC3BjF,EAAMiF,GAAiB,UAClB,GAAIpB,EAAKF,MAAQhI,EAAKD,aAAc,CACrCsJ,EAAcnB,EAAKH,GAAK,EACxBuB,EAAgBpB,EAAKH,GAAK,EAC9B1D,EAAMgF,GAAehF,EAAMiF,GAC3BjF,EAAMiF,GAAiB,KAIzB7E,EAASkE,GAAM,GAIjB,GAAIlE,EAASkE,GACX,IAAK,IAAItM,EAAI,EAAGqM,EAAMxE,EAAMyE,GAAInD,OAAQnJ,EAAIqM,EAAKrM,IAC/C,GACE6L,EAAKJ,OAAS5D,EAAMyE,GAAItM,GAAG8H,QAC3BM,EAASkE,GAAMzE,EAAMyE,GAAItM,GAAG+H,KAC5B,CACAK,EAASkE,IAAOzE,EAAMyE,GAAItM,GAAG+H,KAC7B,MAMN,GAAIK,EAASmE,GACX,IAASvM,EAAI,EAAGqM,EAAMxE,EAAM0E,GAAMpD,OAAQnJ,EAAIqM,EAAKrM,IACjD,GACE6L,EAAKH,KAAO7D,EAAM0E,GAAMvM,GAAG8H,QAC3BM,EAASmE,GAAQ1E,EAAM0E,GAAMvM,GAAG+H,KAChC,CACAK,EAASmE,IAAS1E,EAAM0E,GAAMvM,GAAG+H,KACjC,MAQFM,EAFAwD,EAAKF,MAAQhI,EAAKL,SACP,MAAT6E,EACU0D,EAAKH,GAAK,GAEVG,EAAKH,GAAK,GAGZtJ,EAIVyJ,EAAK9B,QAAU1H,GAERwJ,EAAKF,OAAShI,EAAKN,QAAUM,EAAKJ,YAD3C+E,EAAa,EAIbA,IAGEH,IAASjG,GACXqG,IAEFJ,EAAOqE,GAAWrE,GAGpB,SAASkB,IACP,IAAI4F,EAAMzG,EAAQe,MAClB,GAAW,MAAP0F,EACF,OAAO,KAGT,IAAIpD,EAAOoD,EAAIpD,KACf3D,EAAQ+G,EAAI/G,MACZC,EAAO8G,EAAI9G,KACXC,EAAW6G,EAAI7G,SACfC,EAAY4G,EAAI5G,UAChBC,EAAa2G,EAAI3G,WACjBC,EAAc0G,EAAI1G,YAElB,IAoBMyE,EAAaC,EApBfX,EAAKnE,EACLoE,EAAOC,GAAWrE,GAMtB,GAJAH,EAAM6D,EAAKJ,MAAQzD,EAAM6D,EAAKH,IAC9B1D,EAAM6D,EAAKJ,MAAMpB,KAAOwB,EAAK9B,MAC7B/B,EAAM6D,EAAKH,IAAM,KAEbG,EAAKF,MAAQhI,EAAKN,QACpB2E,EAAM6D,EAAKH,IAAM,CAAErB,KAAMwB,EAAKC,SAAU3B,MAAOoC,QAC1C,GAAIV,EAAKF,MAAQhI,EAAKJ,WAAY,CACvC,IAAI8K,EAEFA,EADE/B,IAAOpK,EACD2J,EAAKH,GAAK,GAEVG,EAAKH,GAAK,GAEpB1D,EAAMqG,GAAS,CAAEhE,KAAMhI,EAAM8H,MAAOoC,GAGlCV,EAAKF,OAAShI,EAAKF,aAAeE,EAAKD,gBAErCmI,EAAKF,MAAQhI,EAAKF,cACpBuJ,EAAcnB,EAAKH,GAAK,EACxBuB,EAAgBpB,EAAKH,GAAK,GACjBG,EAAKF,MAAQhI,EAAKD,eAC3BsJ,EAAcnB,EAAKH,GAAK,EACxBuB,EAAgBpB,EAAKH,GAAK,GAG5B1D,EAAMgF,GAAehF,EAAMiF,GAC3BjF,EAAMiF,GAAiB,MAGzB,OAAOpB,EAsFT,SAASqD,EAAcrD,EAAMyB,GAE3B,IAAI6B,EAAajB,EAAarC,GAI9B,GAAIyB,EAAQ,CACV,IAAI8B,EAAUD,EAAWE,MACvB,8DAEF,GAAID,EACF,IAAIrF,EAAQqF,EAAQ,GAChB3D,EAAO2D,EAAQ,GACf1D,EAAK0D,EAAQ,GACbxD,EAAYwD,EAAQ,GAK5B,IADA,IAAIlD,EAAQH,IACH/L,EAAI,EAAGqM,EAAMH,EAAM/C,OAAQnJ,EAAIqM,EAAKrM,IAAK,CAGhD,GACEmP,IAAejB,EAAab,EAAYnB,EAAMlM,MAC7CsN,GAAU6B,IAAejB,EAAab,EAAYnB,EAAMlM,IAAI,IAE7D,OAAOkM,EAAMlM,GAEb,GACEoP,KACErF,GAASA,EAAMO,eAAiB4B,EAAMlM,GAAG+J,QAC3CnG,EAAQ6H,IAASS,EAAMlM,GAAGyL,MAC1B7H,EAAQ8H,IAAOQ,EAAMlM,GAAG0L,MACtBE,GAAaA,EAAUtB,eAAiB4B,EAAMlM,GAAG4L,WAEnD,OAAOM,EAAMlM,GAKnB,OAAO,KAMT,SAASmM,EAAKnM,GACZ,OAAOA,GAAK,EAGd,SAAS8N,GAAK9N,GACZ,OAAW,GAAJA,EAGT,SAASuK,GAAUvK,GACjB,IAAIsP,EAAIxB,GAAK9N,GACXc,EAAIqL,EAAKnM,GACX,MAAO,WAAWuP,UAAUD,EAAGA,EAAI,GAAK,WAAWC,UAAUzO,EAAGA,EAAI,GAGtE,SAAS0L,GAAWnM,GAClB,OAAOA,IAAM8B,EAAQD,EAAQC,EAQ/B,SAASqN,GAAYC,GACnB,IAAI5D,EAAO6D,GAAMD,GACjB5D,EAAK8D,IAAMtC,EAAYxB,GAAM,GAC7BA,EAAKH,GAAKnB,GAAUsB,EAAKH,IACzBG,EAAKJ,KAAOlB,GAAUsB,EAAKJ,MAE3B,IAAIE,EAAQ,GAEZ,IAAK,IAAI5D,KAAQpE,EACXA,EAAKoE,GAAQ8D,EAAKF,QACpBA,GAASxI,EAAM4E,IAKnB,OAFA8D,EAAKF,MAAQA,EAENE,EAGT,SAAS6D,GAAME,GACb,IAAIC,EAAOD,aAAe3H,MAAQ,GAAK,GAEvC,IAAK,IAAItG,KAAYiO,EAEjBC,EAAKlO,GADiB,kBAAbA,EACQ+N,GAAME,EAAIjO,IAEViO,EAAIjO,GAIzB,OAAOkO,EAGT,SAASC,GAAKC,GACZ,OAAOA,EAAI5B,QAAQ,aAAc,IAMnC,SAAS6B,GAAMC,GAKb,IAJA,IAAI/D,EAAQH,EAAe,CAAEc,OAAO,IAChCqD,EAAQ,EACR/F,EAAQhC,EAEHnI,EAAI,EAAGqM,EAAMH,EAAM/C,OAAQnJ,EAAIqM,EAAKrM,IAAK,CAEhD,GADAsJ,EAAU4C,EAAMlM,KACXoN,EAAcjD,GACjB,GAAI8F,EAAQ,EAAI,EAEdC,GADkBF,GAAMC,EAAQ,QAGhCC,IAGJ7G,IAGF,OAAO6G,EAGT,OA3jCEzG,EADiB,qBAARxH,EACJO,EAEAP,GAyjCA,CAILE,MAAOA,EACPD,MAAOA,EACPG,KAAMA,EACN8N,OAvsCW,IAwsCX7N,OAAQA,EACR8N,KAvsCS,IAwsCTC,MAvsCU,IAwsCV9N,KAAMA,EACNqB,QAAU,WAQR,IADA,IAAI0M,EAAO,GACFtQ,EAAI4D,EAAQC,GAAI7D,GAAK4D,EAAQgE,GAAI5H,IAChC,IAAJA,EACFA,GAAK,EAGPsQ,EAAKlH,KAAKmB,GAAUvK,IAEtB,OAAOsQ,EAfC,GAiBVnN,MAAOA,EAKPsG,KAAM,SAASxH,GACb,OAAOwH,EAAKxH,IAGduH,MAAO,WACL,OAAOA,KAGT0C,MAAO,SAASF,GAUd,IAHA,IAAIuE,EAAaxE,EAAeC,GAC5BE,EAAQ,GAEHlM,EAAI,EAAGqM,EAAMkE,EAAWpH,OAAQnJ,EAAIqM,EAAKrM,IAK3B,qBAAZgM,GACP,YAAaA,GACbA,EAAQwE,QAERtE,EAAM9C,KAAKoG,GAAYe,EAAWvQ,KAElCkM,EAAM9C,KAAKiE,EAAYkD,EAAWvQ,IAAI,IAI1C,OAAOkM,GAGT8B,SAAU,WACR,OAAOA,KAGTC,aAAc,WACZ,OAAOA,KAGTM,aAAc,WACZ,OAAOA,KAGTkC,QAAS,WACP,OACEnI,GAAc,KACdiG,KACAC,KACAK,KAIJL,sBAAuB,WACrB,OAAOA,KAGTK,wBAAyB,WACvB,OAAOA,KAGT6B,UAAW,WACT,OACEpI,GAAc,KACd2F,KACAM,KACAC,KACAK,KAIJhF,aAAc,SAAS5H,GACrB,OAAO4H,EAAa5H,IAGtBA,IAAK,WACH,OAAO6G,KAGTd,MAAO,WAIL,IAHA,IAAIuF,EAAS,GACXoD,EAAM,GAEC3Q,EAAI4D,EAAQC,GAAI7D,GAAK4D,EAAQgE,GAAI5H,IACxB,MAAZgI,EAAMhI,GACR2Q,EAAIvH,KAAK,MAETuH,EAAIvH,KAAK,CAAEiB,KAAMrC,EAAMhI,GAAGqK,KAAMF,MAAOnC,EAAMhI,GAAGmK,QAE7CnK,EAAI,EAAK,MACZuN,EAAOnE,KAAKuH,GACZA,EAAM,GACN3Q,GAAK,GAIT,OAAOuN,GAGTqD,IAAK,SAAS5E,GAIZ,IAAI6E,EACiB,kBAAZ7E,GAAwD,kBAAzBA,EAAQ8E,aAC1C9E,EAAQ8E,aACR,KACFC,EACiB,kBAAZ/E,GAAqD,kBAAtBA,EAAQ+E,UAC1C/E,EAAQ+E,UACR,EACFC,EAAS,GACTC,GAAgB,EAGpB,IAAK,IAAIjR,KAAKyI,EAIZuI,EAAO5H,KAAK,IAAMpJ,EAAI,KAAOyI,EAAOzI,GAAK,KAAO6Q,GAChDI,GAAgB,EAGdA,GAAiBzI,EAAQW,QAC3B6H,EAAO5H,KAAKyH,GAcd,IAXA,IAAIK,EAAiB,SAASC,GAC5B,IAAIC,EAAU1I,EAASI,KACvB,GAAuB,qBAAZsI,EAAyB,CAClC,IAAIC,EAAYF,EAAYhI,OAAS,EAAI,IAAM,GAC/CgI,EAAc,GAAH,OAAMA,GAAN,OAAoBE,EAApB,YAAiCD,EAAjC,KAEb,OAAOD,GAILnI,EAAmB,GAChBR,EAAQW,OAAS,GACtBH,EAAiBI,KAAKC,KAGxB,IAAI6C,EAAQ,GACRiF,EAAc,GAQlB,IALgC,IAA5BnI,EAAiBG,QACnB+C,EAAM9C,KAAK8H,EAAe,KAIrBlI,EAAiBG,OAAS,GAAG,CAClCgI,EAAcD,EAAeC,GAC7B,IAAItF,EAAO7C,EAAiBO,MAGvBf,EAAQW,QAAyB,MAAf0C,EAAK1B,MAEF,MAAf0B,EAAK1B,QAEVgH,EAAYhI,QACd+C,EAAM9C,KAAK+H,GAEbA,EAAc5I,EAAc,KAN5B4I,EAAc5I,EAAc,QAS9B4I,EAAcA,EAAc,IAAM9D,EAAYxB,GAAM,GACpDvC,EAAUuC,GAgBZ,GAZIsF,EAAYhI,QACd+C,EAAM9C,KAAK8H,EAAeC,IAIC,qBAAlB1I,EAAO6I,QAChBpF,EAAM9C,KAAKX,EAAO6I,QAMF,IAAdP,EACF,OAAOC,EAAO5F,KAAK,IAAMc,EAAMd,KAAK,KAGtC,IAAImG,EAAQ,WACV,OAAIP,EAAO7H,OAAS,GAAmC,MAA9B6H,EAAOA,EAAO7H,OAAS,KAC9C6H,EAAOzH,OACA,IAMPiI,EAAe,SAASC,EAAO5F,GAAM,UACrBA,EAAKlC,MAAM,MADU,IACvC,2BAAmC,KAA1B+H,EAA0B,QACjC,GAAKA,EAAL,CAGA,GAAID,EAAQC,EAAMvI,OAAS4H,EAAW,CACpC,KAAOQ,KACLE,IAEFT,EAAO5H,KAAKyH,GACZY,EAAQ,EAEVT,EAAO5H,KAAKsI,GACZD,GAASC,EAAMvI,OACf6H,EAAO5H,KAAK,KACZqI,MAfqC,8BAoBvC,OAHIF,KACFE,IAEKA,GAILE,EAAgB,EACpB,IAAS3R,EAAI,EAAGA,EAAIkM,EAAM/C,OAAQnJ,IAC5B2R,EAAgBzF,EAAMlM,GAAGmJ,OAAS4H,GAChC7E,EAAMlM,GAAG4R,SAAS,KACpBD,EAAgBH,EAAaG,EAAezF,EAAMlM,KAKlD2R,EAAgBzF,EAAMlM,GAAGmJ,OAAS4H,GAAmB,IAAN/Q,GAEf,MAA9BgR,EAAOA,EAAO7H,OAAS,IACzB6H,EAAOzH,MAGTyH,EAAO5H,KAAKyH,GACZc,EAAgB,GACD,IAAN3R,IACTgR,EAAO5H,KAAK,KACZuI,KAEFX,EAAO5H,KAAK8C,EAAMlM,IAClB2R,GAAiBzF,EAAMlM,GAAGmJ,QAG5B,OAAO6H,EAAO5F,KAAK,KAGrByG,SAAU,SAASjB,EAAK5E,GAGtB,IAAIsB,EACiB,qBAAZtB,GAA2B,WAAYA,GAC1CA,EAAQsB,OAGd,SAASwE,EAAK/B,GACZ,OAAOA,EAAI5B,QAAQ,MAAO,MAgC5B,IAAI2C,EACiB,kBAAZ9E,GAAwD,kBAAzBA,EAAQ8E,aAC1C9E,EAAQ8E,aACR,QAKFiB,EAAe,IAAIC,OACrB,YACEF,EAAKhB,GADP,eAIEgB,EAAKhB,GACL,QAIAmB,EAAgBF,EAAanH,KAAKgG,GAClCmB,EAAaG,KAAKtB,GAAK,GACvB,GAGJpH,IAGA,IAAI2I,EAhDJ,SAA0B1J,EAAQuD,GAWhC,IAVA,IAAI8E,EACiB,kBAAZ9E,GACyB,kBAAzBA,EAAQ8E,aACX9E,EAAQ8E,aACR,QACFsB,EAAa,GACbD,EAAU1J,EAAOkB,MAAM,IAAIqI,OAAOF,EAAKhB,KACvCvP,EAAM,GACNN,EAAQ,GAEHjB,EAAI,EAAGA,EAAImS,EAAQhJ,OAAQnJ,IAClCuB,EAAM4Q,EAAQnS,GAAGmO,QAAQ,6BAA8B,MACvDlN,EAAQkR,EAAQnS,GAAGmO,QAAQ,6BAA8B,MACrD2B,GAAKvO,GAAK4H,OAAS,IACrBiJ,EAAW7Q,GAAON,GAItB,OAAOmR,EA6BKC,CAAiBJ,EAAejG,GAC9C,IAAK,IAAIzK,KAAO4Q,EACd9G,EAAW,CAAC9J,EAAK4Q,EAAQ5Q,KAK3B,GAAyB,MAArB4Q,EAAO,UACH,QAASA,KAAW1I,EAAK0I,EAAO,KAAS,IAE7C,OAAO,EA4DX,IA9CA,IAmBIG,EAAiB,SAASC,GAE5B,OADAA,EAASA,EAAOpE,QAAQ,IAAI6D,OAAOF,EAAKhB,GAAe,KAAM,KAC7D,WArBW,SAASyB,GACpB,OAAOtK,MACJwD,KAAK8G,GACLC,KAAI,SAASnS,GAGZ,OAAOA,EAAEoS,WAAW,GAAK,IACrBpS,EAAEoS,WAAW,GAAGC,SAAS,IACzBC,mBAAmBtS,GAAG8N,QAAQ,MAAO,IAAI7D,iBAE9Cc,KAAK,IAWGwH,CAAOL,EAAOvD,MAAM,EAAGuD,EAAOpJ,OAAS,IAAlD,MAGE0J,EAAiB,SAASN,GAC5B,GAAIA,EAAOO,WAAW,MAAQP,EAAOQ,SAAS,KAC5C,OAbW,SAASR,GACtB,OAAwB,GAAjBA,EAAOpJ,OACV,GACA6J,mBAAmB,IAAMT,EAAOlD,MAAM,WAAWjE,KAAK,MAUjD6H,CAASV,EAAOvD,MAAM,EAAGuD,EAAOpJ,OAAS,KAKhD+J,EAAKtC,EACNzC,QAAQ8D,EAAe,IACvB9D,QAEC,IAAI6D,OAAJ,0BAAgCF,EAAKhB,GAArC,OAAyD,MACzD,SAASzB,EAAO8D,EAASC,GACvB,YAAmBC,IAAZF,EACHb,EAAea,GACf,IAAMb,EAAe,IAAD,OAAKc,EAAUpE,MAAM,GAArB,SAG3Bb,QAAQ,IAAI6D,OAAOF,EAAKhB,GAAe,KAAM,KAG5CwC,EAAY,oBACTA,EAAU1I,KAAKsI,IACpBA,EAAKA,EAAG/E,QAAQmF,EAAW,IAa7B,IAAIpH,EAAQ4D,GAHZoD,GAHAA,GAHAA,EAAKA,EAAG/E,QAAQ,gBAAiB,KAGzBA,QAAQ,UAAW,KAGnBA,QAAQ,SAAU,KAGLxE,MAAM,IAAIqI,OAAO,QAGtC9F,EAAQA,EACLd,KAAK,KACL+C,QAAQ,OAAQ,KAChBxE,MAAM,KAGT,IAFA,IAAIkC,EAAO,GAEF0H,EAAY,EAAGA,EAAYrH,EAAM/C,OAAS,EAAGoK,IAAa,CACjE,IAAInC,EAAUyB,EAAe3G,EAAMqH,IACnC,QAAgBF,IAAZjC,EAAJ,CASA,GAAY,OALZvF,EAAOqD,EAAchD,EAAMqH,GAAYjG,IAMrC,OAAO,EAEPhE,EAAUuC,QAXVnD,EAASI,KAAkBsI,EAuB/B,QAPgBiC,KADhBjC,EAAUyB,EAAe3G,EAAMA,EAAM/C,OAAS,OAE5CT,EAASI,KAAkBsI,EAC3BlF,EAAM3C,OAIRsC,EAAOK,EAAMA,EAAM/C,OAAS,GACxB1G,EAAiBwH,QAAQ4B,IAAS,GA9KtC,SAAkBnK,GAChB,IAAK,IAAIH,KAAOG,EACd,OAAO,EAET,OAAO,GA2KH8R,CAAS/K,IAAoC,qBAAlBA,EAAO6I,QACpCjG,EAAW,CAAC,SAAUQ,QAEnB,CAEL,GAAY,OADZA,EAAOqD,EAAcrD,EAAMyB,IAEzB,OAAO,EAEPhE,EAAUuC,GAGd,OAAO,GAGTpD,OAAQ,WACN,OAAO4C,EAAWoI,YAGpBC,MAAO,WACL,OA3oBJ,WAEE,IADA,IAAI3R,EAAI,kCACC/B,EAAI4D,EAAQC,GAAI7D,GAAK4D,EAAQgE,GAAI5H,IAAK,CAO7C,GALgB,IAAZ8N,GAAK9N,KACP+B,GAAK,IAAM,WAAWoK,EAAKnM,IAAM,MAInB,MAAZgI,EAAMhI,GACR+B,GAAK,UACA,CACL,IAAIgI,EAAQ/B,EAAMhI,GAAGqK,KAGrBtI,GAAK,KAFOiG,EAAMhI,GAAGmK,QACEhI,EAAQ4H,EAAMkB,cAAgBlB,EAAMO,eACvC,IAGjBtK,EAAI,EAAK,MACZ+B,GAAK,MACL/B,GAAK,GAMT,OAHA+B,GAAK,kCACLA,EAAK,gCAmnBI2R,IAGTvL,KAAM,WACJ,OAAOA,GAGT0D,KAAM,SAASA,EAAMG,GAanB,IAAIsB,EACiB,qBAAZtB,GAA2B,WAAYA,GAC1CA,EAAQsB,OAGVqG,EAAW,KAEf,GAAoB,kBAAT9H,EACT8H,EAAWzE,EAAcrD,EAAMyB,QAC1B,GAAoB,kBAATzB,EAIhB,IAHA,IAAIK,EAAQH,IAGH/L,EAAI,EAAGqM,EAAMH,EAAM/C,OAAQnJ,EAAIqM,EAAKrM,IAC3C,GACE6L,EAAKJ,OAASlB,GAAU2B,EAAMlM,GAAGyL,OACjCI,EAAKH,KAAOnB,GAAU2B,EAAMlM,GAAG0L,QAC5B,cAAeQ,EAAMlM,KACtB6L,EAAKD,YAAcM,EAAMlM,GAAG4L,WAC9B,CACA+H,EAAWzH,EAAMlM,GACjB,MAMN,IAAK2T,EACH,OAAO,KAMT,IAAIC,EAAcpE,GAAYmE,GAI9B,OAFArK,EAAUqK,GAEHC,GAGTC,KAAM,WACJ,IAAIhI,EAAOxC,IACX,OAAOwC,EAAO2D,GAAY3D,GAAQ,MAGpClD,MAAO,WACL,OAAOA,KAGTyB,IAAK,SAASL,EAAOjC,GACnB,OAAOsC,EAAIL,EAAOjC,IAGpBjH,IAAK,SAASiH,GACZ,OAAOjH,EAAIiH,IAGbgM,OAAQ,SAAShM,GACf,OA3zCJ,SAAgBA,GACd,IAAIiC,EAAQlJ,EAAIiH,GAQhB,OAPAE,EAAMpE,EAAQkE,IAAW,KACrBiC,GAASA,EAAMM,OAAS9H,IAC1B2F,EAAM6B,EAAMI,OAAS/H,GAGvByG,EAAaC,KAENiB,EAkzCE+J,CAAOhM,IAGhBkI,MAAO,SAASC,GACd,OAAOD,GAAMC,IAGf8D,aAAc,SAASjM,GACrB,GAAIA,KAAUlE,EAAS,CACrB,IAAIoQ,EAAUpQ,EAAQkE,GACtB,OAAQqE,EAAK6H,GAAWlG,GAAKkG,IAAY,IAAM,EAAI,QAAU,OAG/D,OAAO,MAGTxL,QAAS,SAASwD,GAQhB,IAPA,IAAIhD,EAAmB,GACnBiL,EAAe,GACfzD,GACiB,qBAAZxE,GACP,YAAaA,GACbA,EAAQwE,SAEHhI,EAAQW,OAAS,GACtBH,EAAiBI,KAAKC,KAGxB,KAAOL,EAAiBG,OAAS,GAAG,CAClC,IAAI0C,EAAO7C,EAAiBO,MACxBiH,EACFyD,EAAa7K,KAAKoG,GAAY3D,IAE9BoI,EAAa7K,KAAKiE,EAAYxB,IAEhCvC,EAAUuC,GAGZ,OAAOoI,GAGTC,YAAa,WACX,OAAOxL,EAASI,MAGlBqL,YAAa,SAAS/C,GACpB1I,EAASI,KAAkBsI,EAAQjD,QAAQ,IAAK,KAAKA,QAAQ,IAAK,MAGpEiG,eAAgB,WACd,IAAIhD,EAAU1I,EAASI,KAEvB,cADOJ,EAASI,KACTsI,GAGTiD,aAAc,WAEZ,OADAtL,IACOrI,OAAO4P,KAAK5H,GAAU8J,KAAI,SAASvQ,GACxC,MAAO,CAACA,IAAKA,EAAKmP,QAAS1I,EAASzG,QAIxCqS,gBAAiB,WAEf,OADAvL,IACOrI,OAAO4P,KAAK5H,GAChB8J,KAAI,SAASvQ,GACZ,IAAImP,EAAU1I,EAASzG,GAEvB,cADOyG,EAASzG,GACT,CAACA,IAAKA,EAAKmP,QAASA,SAQDtR,EAAQkC,MAAQA,OAG5C,KAANuS,aACE,OAAOvS,GADH,+B,gBC52DR,IAAIwS,EAA6B,EAAQ,GA2DzCzU,EAAOD,QAzDP,SAAoCW,EAAGgU,GACrC,IAAIC,EAEJ,GAAsB,qBAAX3T,QAAgD,MAAtBN,EAAEM,OAAO4T,UAAmB,CAC/D,GAAI1M,MAAM2M,QAAQnU,KAAOiU,EAAKF,EAA2B/T,KAAOgU,GAAkBhU,GAAyB,kBAAbA,EAAE0I,OAAqB,CAC/GuL,IAAIjU,EAAIiU,GACZ,IAAI1U,EAAI,EAEJ6U,EAAI,aAER,MAAO,CACL9S,EAAG8S,EACHpT,EAAG,WACD,OAAIzB,GAAKS,EAAE0I,OAAe,CACxB2L,MAAM,GAED,CACLA,MAAM,EACN7T,MAAOR,EAAET,OAGb+U,EAAG,SAAWC,GACZ,MAAMA,GAER1F,EAAGuF,GAIP,MAAM,IAAII,UAAU,yIAGtB,IAEIC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLrT,EAAG,WACD2S,EAAKjU,EAAEM,OAAO4T,aAEhBlT,EAAG,WACD,IAAI4T,EAAOX,EAAGY,OAEd,OADAH,EAAmBE,EAAKP,KACjBO,GAETN,EAAG,SAAWQ,GACZH,GAAS,EACTF,EAAMK,GAERjG,EAAG,WACD,IACO6F,GAAoC,MAAhBT,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIU,EAAQ,MAAMF,O,gBCrD1B,IAAIM,EAAmB,EAAQ,GAW/BzV,EAAOD,QATP,SAAqCW,EAAGgV,GACtC,GAAKhV,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO+U,EAAiB/U,EAAGgV,GACtD,IAAIhU,EAAIf,OAAOkB,UAAU8Q,SAASvS,KAAKM,GAAGuO,MAAM,GAAI,GAEpD,MADU,WAANvN,GAAkBhB,EAAEiV,cAAajU,EAAIhB,EAAEiV,YAAYnV,MAC7C,QAANkB,GAAqB,QAANA,EAAoBwG,MAAMwD,KAAKhL,GACxC,cAANgB,GAAqB,2CAA2CmJ,KAAKnJ,GAAW+T,EAAiB/U,EAAGgV,QAAxG,K,cCEF1V,EAAOD,QAVP,SAA2B6V,EAAKtJ,IACnB,MAAPA,GAAeA,EAAMsJ,EAAIxM,UAAQkD,EAAMsJ,EAAIxM,QAE/C,IAAK,IAAInJ,EAAI,EAAG4V,EAAO,IAAI3N,MAAMoE,GAAMrM,EAAIqM,EAAKrM,IAC9C4V,EAAK5V,GAAK2V,EAAI3V,GAGhB,OAAO4V,I,6BCPM,SAASC,EAAgBjG,EAAKrO,EAAKN,GAYhD,OAXIM,KAAOqO,EACTlP,OAAOC,eAAeiP,EAAKrO,EAAK,CAC9BN,MAAOA,EACPL,YAAY,EACZkV,cAAc,EACdC,UAAU,IAGZnG,EAAIrO,GAAON,EAGN2O,ECZT,SAASoG,EAAkBC,EAAQC,GACjC,IAAK,IAAIlW,EAAI,EAAGA,EAAIkW,EAAM/M,OAAQnJ,IAAK,CACrC,IAAImW,EAAaD,EAAMlW,GACvBmW,EAAWvV,WAAauV,EAAWvV,aAAc,EACjDuV,EAAWL,cAAe,EACtB,UAAWK,IAAYA,EAAWJ,UAAW,GACjDrV,OAAOC,eAAesV,EAAQE,EAAW5U,IAAK4U,I,2BCmBrCC,EAAU,CACrB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAyBWC,EAAb,WAIE,aAAe,IAAD,GCtHD,SAAyBC,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAItB,UAAU,qCDoHR,cAHNuB,UAGM,OAFN1H,eAEM,EACZ2H,KAAKD,KAAO,IAAMxU,IAwClByU,KAAK3H,WAAL,OACG2H,KAAKD,KAAKrU,MAvCiB,CAC5BuU,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJxU,EAAG,KACHD,EAAG,OAsBL,IAEG2T,KAAKD,KAAKtU,MArBiB,CAC5BwU,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJxU,EAAG,KACHD,EAAG,OAGL,GDrJW,IAAsByT,EAAaiB,EAAYC,ECwG9D,ODxGqClB,ECwGrC,GDxGkDiB,ECwGlD,4BAmDeE,GAAW,IAAD,EACfvP,EAAOsO,KAAKD,KAAKrO,OACjByB,EAAW6M,KAAK3H,UAAU3G,GAC1BwP,EAAc/N,EAAS8N,EAAG3N,OAChC,IAAK4N,EACH,OAAO,EAGT,IAAMC,EACJF,EAAGG,YAAY9E,SAAS,MAAQ2E,EAAGG,YAAY9E,SAAS,KACpD+E,EAA8C,OAArC,UAAArB,KAAKD,KAAK3V,IAAI8W,UAAd,eAA4BtN,MAM3C,QALmBoM,KAAKD,KAAK3K,KAAK,CAChCJ,KAAMkM,EACNjM,GAAIgM,EAAGG,YACPjM,UAAWgM,GAA2BE,EAAS,SAAMzE,MAKvDzJ,EAAS8N,EAAG3N,OAAS2N,EAAGG,aACjB,KAvEX,2BA0EcE,EAAoBC,GAW9B,IAX4D,IAAD,SACrD9L,GAAK,OACRuK,KAAKD,KAAKrU,MAAQ,CACjB8V,GAAI,EACJ/L,MAAO6L,IAHA,IAKRtB,KAAKD,KAAKtU,MAAQ,CACjB+V,GAAI,EACJ/L,MAAO8L,IAPA,GADgD,aAezD,IAHA,IAAM7P,EAAO,EAAKqO,KAAKrO,OACjB+P,EAAiB,EAAK1B,KAAKtK,MAAM,CAAEsE,SAAS,IAC9C2H,EAAe,EAdsC,aAgBvD,IAAMC,EAASlM,EAAM/D,GAAN,GACT0D,EAAOK,EAAM/D,GAAN,MAAqBiQ,GAMlC,OALAlM,EAAM/D,GAAN,IAAqB,EACrB+D,EAAM/D,GAAN,IAAqB+D,EAAM/D,GAAN,MAAqBgB,OAChB,IAAtB+C,EAAM/D,GAAN,IACFgQ,IAEmB,IAAjBA,EACI,CAAN,KAAO,CACLE,QAA8B,MAArB,EAAK7B,KAAKrO,OAAiB,aAAe,aACnDmQ,OAAQ,aAIVJ,EAAeK,MACb,SAACnY,GAAD,OACEA,EAAEqL,OAAS,EAAKqD,UAAU3G,GAAM0D,EAAK9B,QACrC3J,EAAEsL,KAAOG,EAAKgM,gBAGlB,EAAKhM,KAAKA,GACV,cARF,KAdW,CAAC,IAAD,qBAsBT,MAtBS,qCAJP4K,KAAKD,KAAK9F,aAAa,CAAC,IAAD,wCA+B/B,OAAI+F,KAAKD,KAAKvI,eACL,CACLoK,QAA8B,MAArB5B,KAAKD,KAAKrO,OAAiB,aAAe,aACnDmQ,OAAQ,aAGL,CACLD,QAAS,OACTC,OAAQ7B,KAAKD,KAAK3H,0BACd,uBACA4H,KAAKD,KAAKjI,eACV,YACAkI,KAAKD,KAAKhI,wBACV,wBACA,qBAlIV,4BAuII,OAAOiI,KAAKD,KAAKvU,QAvIrB,4BA2II,OAAOwU,KAAKD,KAAK5F,WDlPHoF,EAAkBO,EAAY3U,UAAW4V,GACrDC,GAAazB,EAAkBO,EAAakB,GCsGlD,KElHe,SAASe,EAAkB7C,EAAKtJ,IAClC,MAAPA,GAAeA,EAAMsJ,EAAIxM,UAAQkD,EAAMsJ,EAAIxM,QAE/C,IAAK,IAAInJ,EAAI,EAAG4V,EAAO,IAAI3N,MAAMoE,GAAMrM,EAAIqM,EAAKrM,IAC9C4V,EAAK5V,GAAK2V,EAAI3V,GAGhB,OAAO4V,ECHM,SAAS6C,EAAmB9C,GACzC,OCJa,SAA4BA,GACzC,GAAI1N,MAAM2M,QAAQe,GAAM,OAAO,EAAiBA,GDGzC,CAAkBA,IELZ,SAA0B+C,GACvC,GAAsB,qBAAX3X,QAA0BA,OAAO4T,YAAYjU,OAAOgY,GAAO,OAAOzQ,MAAMwD,KAAKiN,GFIvD,CAAgB/C,IGJpC,SAAqClV,EAAGgV,GACrD,GAAKhV,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,EAAiBA,EAAGgV,GACtD,IAAIhU,EAAIf,OAAOkB,UAAU8Q,SAASvS,KAAKM,GAAGuO,MAAM,GAAI,GAEpD,MADU,WAANvN,GAAkBhB,EAAEiV,cAAajU,EAAIhB,EAAEiV,YAAYnV,MAC7C,QAANkB,GAAqB,QAANA,EAAoBwG,MAAMwD,KAAKhL,GACxC,cAANgB,GAAqB,2CAA2CmJ,KAAKnJ,GAAW,EAAiBhB,EAAGgV,QAAxG,GHFyD,CAA2BE,IILvE,WACb,MAAM,IAAIV,UAAU,wIJIwE,GKFvF,IAAM0D,EREW,CACtB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KQlByCC,SAAQ,SAACC,GAClD,OAAOzC,EAAQ5D,KAAI,SAACzQ,GAClB,MAAO,CACLgI,MAAO8O,EACPhB,YAAa9V,SAKN+W,EAAiB,WAC5B,OAGF,SAAqBC,GAEnB,IADA,IAAMC,EAAM,EAAOD,GACV/Y,EAAIgZ,EAAO7P,OAAS,EAAGnJ,EAAI,EAAGA,IAAK,CAC1C,IAAM8M,EAAImM,KAAKC,MAAMD,KAAKE,UAAYnZ,EAAI,IADA,EAEjB,CAACgZ,EAAOlM,GAAIkM,EAAOhZ,IAA3CgZ,EAAOhZ,GAFkC,KAE9BgZ,EAAOlM,GAFuB,KAI5C,OAAOkM,EATAI,CAAST,ICUlBU,UAAY,SAACC,GAAyC,IAAD,IAC7CC,EAAa,UAAGD,EAAIE,KAAKxB,kBAAZ,QAA0Bc,IACvCW,EAAa,UAAGH,EAAIE,KAAKzB,kBAAZ,QAA0Be,IAEvCtC,EAAO,IAAIH,EACXrF,EAASwF,EAAKkD,KAAKD,EAAeF,GAElCI,EAA8B,CAClC/I,IAAK4F,EAAK5F,MACV3O,IAAKuU,EAAKvU,MACVwX,gBACAF,gBACAlB,QACqB,SAAnBrH,EAAOqH,QACH,OACmB,eAAnBrH,EAAOqH,QACP,aACA,aACNuB,GAAI5I,EAAOsH,QAGbuB,YAAYF","file":"static/js/worker.d69aae68.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/permiscuchess/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/*\n * Copyright (c) 2020, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\nvar Chess = function(fen) {\n  var BLACK = 'b'\n  var WHITE = 'w'\n\n  var EMPTY = -1\n\n  var PAWN = 'p'\n  var KNIGHT = 'n'\n  var BISHOP = 'b'\n  var ROOK = 'r'\n  var QUEEN = 'q'\n  var KING = 'k'\n\n  var SYMBOLS = 'pnbrqkPNBRQK'\n\n  var DEFAULT_POSITION =\n    'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\n  var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*']\n\n  var PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15]\n  }\n\n  var PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1]\n  }\n\n  // prettier-ignore\n  var ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n  ];\n\n  // prettier-ignore\n  var RAYS = [\n     17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n      0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n      0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n      0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n      0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n      1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n      0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n      0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n      0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n      0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n    -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n  ];\n\n  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 }\n\n  var FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q'\n  }\n\n  var BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64\n  }\n\n  var RANK_1 = 7\n  var RANK_2 = 6\n  var RANK_3 = 5\n  var RANK_4 = 4\n  var RANK_5 = 3\n  var RANK_6 = 2\n  var RANK_7 = 1\n  var RANK_8 = 0\n\n  // prettier-ignore\n  var SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n  var ROOKS = {\n    w: [\n      { square: SQUARES.a1, flag: BITS.QSIDE_CASTLE },\n      { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE }\n    ],\n    b: [\n      { square: SQUARES.a8, flag: BITS.QSIDE_CASTLE },\n      { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE }\n    ]\n  }\n\n  var board = new Array(128)\n  var kings = { w: EMPTY, b: EMPTY }\n  var turn = WHITE\n  var castling = { w: 0, b: 0 }\n  var ep_square = EMPTY\n  var half_moves = 0\n  var move_number = 1\n  var history = []\n  var header = {}\n  var comments = {}\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    load(DEFAULT_POSITION)\n  } else {\n    load(fen)\n  }\n\n  function clear(keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    board = new Array(128)\n    kings = { w: EMPTY, b: EMPTY }\n    turn = WHITE\n    castling = { w: 0, b: 0 }\n    ep_square = EMPTY\n    half_moves = 0\n    move_number = 1\n    history = []\n    if (!keep_headers) header = {}\n    comments = {}\n    update_setup(generate_fen())\n  }\n\n  function prune_comments() {\n    var reversed_history = [];\n    var current_comments = {};\n    var copy_comment = function(fen) {\n      if (fen in comments) {\n        current_comments[fen] = comments[fen];\n      }\n    };\n    while (history.length > 0) {\n      reversed_history.push(undo_move());\n    }\n    copy_comment(generate_fen());\n    while (reversed_history.length > 0) {\n      make_move(reversed_history.pop());\n      copy_comment(generate_fen());\n    }\n    comments = current_comments;\n  }\n\n  function reset() {\n    load(DEFAULT_POSITION)\n  }\n\n  function load(fen, keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    var tokens = fen.split(/\\s+/)\n    var position = tokens[0]\n    var square = 0\n\n    if (!validate_fen(fen).valid) {\n      return false\n    }\n\n    clear(keep_headers)\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        var color = piece < 'a' ? WHITE : BLACK\n        put({ type: piece.toLowerCase(), color: color }, algebraic(square))\n        square++\n      }\n    }\n\n    turn = tokens[1]\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]]\n    half_moves = parseInt(tokens[4], 10)\n    move_number = parseInt(tokens[5], 10)\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n      0: 'No errors.',\n      1: 'FEN string must contain six space-delimited fields.',\n      2: '6th field (move number) must be a positive integer.',\n      3: '5th field (half move counter) must be a non-negative integer.',\n      4: '4th field (en-passant square) is invalid.',\n      5: '3rd field (castling availability) is invalid.',\n      6: '2nd field (side to move) is invalid.',\n      7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n      8: '1st field (piece positions) is invalid [consecutive numbers].',\n      9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square'\n    }\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/)\n    if (tokens.length !== 6) {\n      return { valid: false, error_number: 1, error: errors[1] }\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\n      return { valid: false, error_number: 2, error: errors[2] }\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\n      return { valid: false, error_number: 3, error: errors[3] }\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return { valid: false, error_number: 4, error: errors[4] }\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return { valid: false, error_number: 5, error: errors[5] }\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return { valid: false, error_number: 6, error: errors[6] }\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/')\n    if (rows.length !== 8) {\n      return { valid: false, error_number: 7, error: errors[7] }\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0\n      var previous_was_number = false\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return { valid: false, error_number: 8, error: errors[8] }\n          }\n          sum_fields += parseInt(rows[i][k], 10)\n          previous_was_number = true\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return { valid: false, error_number: 9, error: errors[9] }\n          }\n          sum_fields += 1\n          previous_was_number = false\n        }\n      }\n      if (sum_fields !== 8) {\n        return { valid: false, error_number: 10, error: errors[10] }\n      }\n    }\n\n    if (\n      (tokens[3][1] == '3' && tokens[1] == 'w') ||\n      (tokens[3][1] == '6' && tokens[1] == 'b')\n    ) {\n      return { valid: false, error_number: 11, error: errors[11] }\n    }\n\n    /* everything's okay! */\n    return { valid: true, error_number: 0, error: errors[0] }\n  }\n\n  function generate_fen() {\n    var empty = 0\n    var fen = ''\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      if (board[i] == null) {\n        empty++\n      } else {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        var color = board[i].color\n        var piece = board[i].type\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== SQUARES.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    var cflags = ''\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += 'K'\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += 'Q'\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += 'k'\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += 'q'\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-'\n    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square)\n\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1]\n      }\n    }\n    return header\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1'\n      header['FEN'] = fen\n    } else {\n      delete header['SetUp']\n      delete header['FEN']\n    }\n  }\n\n  function get(square) {\n    var piece = board[SQUARES[square]]\n    return piece ? { type: piece.type, color: piece.color } : null\n  }\n\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARES)) {\n      return false\n    }\n\n    var sq = SQUARES[square]\n\n    /* don't let the user place more than one king */\n    if (\n      piece.type == KING &&\n      !(kings[piece.color] == EMPTY || kings[piece.color] == sq)\n    ) {\n      return false\n    }\n\n    board[sq] = { type: piece.type, color: piece.color }\n    if (piece.type === KING) {\n      kings[piece.color] = sq\n    }\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  function remove(square) {\n    var piece = get(square)\n    board[SQUARES[square]] = null\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY\n    }\n\n    update_setup(generate_fen())\n\n    return piece\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type\n    }\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION\n      move.promotion = promotion\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN\n    }\n    return move\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (\n        board[from].type === PAWN &&\n        (rank(to) === RANK_8 || rank(to) === RANK_1)\n      ) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT]\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]))\n        }\n      } else {\n        moves.push(build_move(board, from, to, flags))\n      }\n    }\n\n    var moves = []\n    var us = turn\n    var them = swap_color(us)\n    var second_rank = { b: RANK_7, w: RANK_2 }\n\n    var first_sq = SQUARES.a8\n    var last_sq = SQUARES.h1\n    var single_square = false\n\n    /* do we want legal moves? */\n    var legal =\n      typeof options !== 'undefined' && 'legal' in options\n        ? options.legal\n        : true\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARES) {\n        first_sq = last_sq = SQUARES[options.square]\n        single_square = true\n      } else {\n        /* invalid square */\n        return []\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece == null || piece.color !== us) {\n        continue\n      }\n\n      if (piece.type === PAWN) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0]\n        if (board[square] == null) {\n          add_move(board, moves, i, square, BITS.NORMAL)\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1]\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN)\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j]\n          if (square & 0x88) continue\n\n          if (board[square] != null && board[square].color === them) {\n            add_move(board, moves, i, square, BITS.CAPTURE)\n          } else if (square === ep_square) {\n            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE)\n          }\n        }\n      } else {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j]\n          var square = i\n\n          while (true) {\n            square += offset\n            if (square & 0x88) break\n\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL)\n            } else {\n              if (board[square].color === us) break\n              add_move(board, moves, i, square, BITS.CAPTURE)\n              break\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (!single_square || last_sq === kings[us]) {\n      /* king-side castling */\n      if (castling[us] & BITS.KSIDE_CASTLE) {\n        var castling_from = kings[us]\n        var castling_to = castling_from + 2\n\n        if (\n          board[castling_from + 1] == null &&\n          board[castling_to] == null &&\n          !attacked(them, kings[us]) &&\n          !attacked(them, castling_from + 1) &&\n          !attacked(them, castling_to)\n        ) {\n          add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE)\n        }\n      }\n\n      /* queen-side castling */\n      if (castling[us] & BITS.QSIDE_CASTLE) {\n        var castling_from = kings[us]\n        var castling_to = castling_from - 2\n\n        if (\n          board[castling_from - 1] == null &&\n          board[castling_from - 2] == null &&\n          board[castling_from - 3] == null &&\n          !attacked(them, kings[us]) &&\n          !attacked(them, castling_from - 1) &&\n          !attacked(them, castling_to)\n        ) {\n          add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE)\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = []\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i])\n      }\n      undo_move()\n    }\n\n    return legal_moves\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, sloppy) {\n    var output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      var disambiguator = get_disambiguator(move, sloppy)\n\n      if (move.piece !== PAWN) {\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    make_move(move)\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    undo_move()\n\n    return output\n  }\n\n  // parses all of the decorators out of a SAN string\n  function stripped_san(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue\n\n      var piece = board[i]\n      var difference = i - square\n      var index = difference + 119\n\n      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true\n          } else {\n            if (piece.color === BLACK) return true\n          }\n          continue\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true\n\n        var offset = RAYS[index]\n        var j = i + offset\n\n        var blocked = false\n        while (j !== square) {\n          if (board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) return true\n      }\n    }\n\n    return false\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color])\n  }\n\n  function in_check() {\n    return king_attacked(turn)\n  }\n\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0\n  }\n\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0\n  }\n\n  function insufficient_material() {\n    var pieces = {}\n    var bishops = []\n    var num_pieces = 0\n    var sq_color = 0\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      sq_color = (sq_color + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color)\n        }\n        num_pieces++\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true\n    } else if (\n      /* k vs. kn .... or .... k vs. kb */\n      num_pieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (num_pieces === pieces[BISHOP] + 2) {\n      /* kb vs. kb where any number of bishops are all on the same color */\n      var sum = 0\n      var len = bishops.length\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = []\n    var positions = {}\n    var repetition = false\n\n    while (true) {\n      var move = undo_move()\n      if (!move) break\n      moves.push(move)\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen()\n        .split(' ')\n        .slice(0, 4)\n        .join(' ')\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1\n      if (positions[fen] >= 3) {\n        repetition = true\n      }\n\n      if (!moves.length) {\n        break\n      }\n      make_move(moves.pop())\n    }\n\n    return repetition\n  }\n\n  function push(move) {\n    history.push({\n      move: move,\n      kings: { b: kings.b, w: kings.w },\n      turn: turn,\n      castling: { b: castling.b, w: castling.w },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number\n    })\n  }\n\n  function make_move(move) {\n    var us = turn\n    var them = swap_color(us)\n    push(move)\n\n    board[move.to] = board[move.from]\n    board[move.from] = null\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null\n      } else {\n        board[move.to + 16] = null\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = { type: move.promotion, color: us }\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1\n        var castling_from = move.to + 1\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1\n        var castling_from = move.to - 2\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      }\n\n      /* turn off castling */\n      castling[us] = ''\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          castling[us] & ROOKS[us][i].flag\n        ) {\n          castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          castling[them] & ROOKS[them][i].flag\n        ) {\n          castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === 'b') {\n        ep_square = move.to - 16\n      } else {\n        ep_square = move.to + 16\n      }\n    } else {\n      ep_square = EMPTY\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0\n    } else {\n      half_moves++\n    }\n\n    if (turn === BLACK) {\n      move_number++\n    }\n    turn = swap_color(turn)\n  }\n\n  function undo_move() {\n    var old = history.pop()\n    if (old == null) {\n      return null\n    }\n\n    var move = old.move\n    kings = old.kings\n    turn = old.turn\n    castling = old.castling\n    ep_square = old.ep_square\n    half_moves = old.half_moves\n    move_number = old.move_number\n\n    var us = turn\n    var them = swap_color(turn)\n\n    board[move.from] = board[move.to]\n    board[move.from].type = move.piece // to undo any promotions\n    board[move.to] = null\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = { type: move.captured, color: them }\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index\n      if (us === BLACK) {\n        index = move.to - 16\n      } else {\n        index = move.to + 16\n      }\n      board[index] = { type: PAWN, color: them }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1\n        castling_from = move.to - 1\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2\n        castling_from = move.to + 1\n      }\n\n      board[castling_to] = board[castling_from]\n      board[castling_from] = null\n    }\n\n    return move\n  }\n\n  /* this function is used to uniquely identify ambiguous moves */\n  function get_disambiguator(move, sloppy) {\n    var moves = generate_moves({ legal: !sloppy })\n\n    var from = move.from\n    var to = move.to\n    var piece = move.piece\n\n    var ambiguities = 0\n    var same_rank = 0\n    var same_file = 0\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      var ambig_from = moves[i].from\n      var ambig_to = moves[i].to\n      var ambig_piece = moves[i].piece\n\n      /* if a move of the same piece type ends on the same to square, we'll\n       * need to add a disambiguator to the algebraic notation\n       */\n      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n        ambiguities++\n\n        if (rank(from) === rank(ambig_from)) {\n          same_rank++\n        }\n\n        if (file(from) === file(ambig_from)) {\n          same_file++\n        }\n      }\n    }\n\n    if (ambiguities > 0) {\n      /* if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      if (same_rank > 0 && same_file > 0) {\n        return algebraic(from)\n      } else if (same_file > 0) {\n        /* if the moving piece rests on the same file, use the rank symbol as the\n         * disambiguator\n         */\n        return algebraic(from).charAt(1)\n      } else {\n        /* else use the file symbol */\n        return algebraic(from).charAt(0)\n      }\n    }\n\n    return ''\n  }\n\n  function ascii() {\n    var s = '   +------------------------+\\n'\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* display the rank */\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |'\n      }\n\n      /* empty piece */\n      if (board[i] == null) {\n        s += ' . '\n      } else {\n        var piece = board[i].type\n        var color = board[i].color\n        var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n        s += ' ' + symbol + ' '\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n'\n        i += 8\n      }\n    }\n    s += '   +------------------------+\\n'\n    s += '     a  b  c  d  e  f  g  h\\n'\n\n    return s\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?!\n    var clean_move = stripped_san(move)\n\n    // if we're using the sloppy parser run a regex to grab piece, to, and from\n    // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n    if (sloppy) {\n      var matches = clean_move.match(\n        /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n      )\n      if (matches) {\n        var piece = matches[1]\n        var from = matches[2]\n        var to = matches[3]\n        var promotion = matches[4]\n      }\n    }\n\n    var moves = generate_moves()\n    for (var i = 0, len = moves.length; i < len; i++) {\n      // try the strict parser first, then the sloppy parser if requested\n      // by the user\n      if (\n        clean_move === stripped_san(move_to_san(moves[i])) ||\n        (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))\n      ) {\n        return moves[i]\n      } else {\n        if (\n          matches &&\n          (!piece || piece.toLowerCase() == moves[i].piece) &&\n          SQUARES[from] == moves[i].from &&\n          SQUARES[to] == moves[i].to &&\n          (!promotion || promotion.toLowerCase() == moves[i].promotion)\n        ) {\n          return moves[i]\n        }\n      }\n    }\n\n    return null\n  }\n\n  /*****************************************************************************\n   * UTILITY FUNCTIONS\n   ****************************************************************************/\n  function rank(i) {\n    return i >> 4\n  }\n\n  function file(i) {\n    return i & 15\n  }\n\n  function algebraic(i) {\n    var f = file(i),\n      r = rank(i)\n    return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\n  }\n\n  function swap_color(c) {\n    return c === WHITE ? BLACK : WHITE\n  }\n\n  function is_digit(c) {\n    return '0123456789'.indexOf(c) !== -1\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move)\n    move.san = move_to_san(move, false)\n    move.to = algebraic(move.to)\n    move.from = algebraic(move.from)\n\n    var flags = ''\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag]\n      }\n    }\n    move.flags = flags\n\n    return move\n  }\n\n  function clone(obj) {\n    var dupe = obj instanceof Array ? [] : {}\n\n    for (var property in obj) {\n      if (typeof property === 'object') {\n        dupe[property] = clone(obj[property])\n      } else {\n        dupe[property] = obj[property]\n      }\n    }\n\n    return dupe\n  }\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '')\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({ legal: false })\n    var nodes = 0\n    var color = turn\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1)\n          nodes += child_nodes\n        } else {\n          nodes++\n        }\n      }\n      undo_move()\n    }\n\n    return nodes\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC CONSTANTS (is there a better way to do this?)\n     **************************************************************************/\n    WHITE: WHITE,\n    BLACK: BLACK,\n    PAWN: PAWN,\n    KNIGHT: KNIGHT,\n    BISHOP: BISHOP,\n    ROOK: ROOK,\n    QUEEN: QUEEN,\n    KING: KING,\n    SQUARES: (function() {\n      /* from the ECMA-262 spec (section 12.6.4):\n       * \"The mechanics of enumerating the properties ... is\n       * implementation dependent\"\n       * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n       * ordered correctly\n       */\n      var keys = []\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (i & 0x88) {\n          i += 7\n          continue\n        }\n        keys.push(algebraic(i))\n      }\n      return keys\n    })(),\n    FLAGS: FLAGS,\n\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function(fen) {\n      return load(fen)\n    },\n\n    reset: function() {\n      return reset()\n    },\n\n    moves: function(options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options)\n      var moves = []\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (\n          typeof options !== 'undefined' &&\n          'verbose' in options &&\n          options.verbose\n        ) {\n          moves.push(make_pretty(ugly_moves[i]))\n        } else {\n          moves.push(move_to_san(ugly_moves[i], false))\n        }\n      }\n\n      return moves\n    },\n\n    in_check: function() {\n      return in_check()\n    },\n\n    in_checkmate: function() {\n      return in_checkmate()\n    },\n\n    in_stalemate: function() {\n      return in_stalemate()\n    },\n\n    in_draw: function() {\n      return (\n        half_moves >= 100 ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    insufficient_material: function() {\n      return insufficient_material()\n    },\n\n    in_threefold_repetition: function() {\n      return in_threefold_repetition()\n    },\n\n    game_over: function() {\n      return (\n        half_moves >= 100 ||\n        in_checkmate() ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    validate_fen: function(fen) {\n      return validate_fen(fen)\n    },\n\n    fen: function() {\n      return generate_fen()\n    },\n\n    board: function() {\n      var output = [],\n        row = []\n\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (board[i] == null) {\n          row.push(null)\n        } else {\n          row.push({ type: board[i].type, color: board[i].color })\n        }\n        if ((i + 1) & 0x88) {\n          output.push(row)\n          row = []\n          i += 8\n        }\n      }\n\n      return output\n    },\n\n    pgn: function(options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\n'\n      var max_width =\n        typeof options === 'object' && typeof options.max_width === 'number'\n          ? options.max_width\n          : 0\n      var result = []\n      var header_exists = false\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \"' + header[i] + '\"]' + newline)\n        header_exists = true\n      }\n\n      if (header_exists && history.length) {\n        result.push(newline)\n      }\n\n      var append_comment = function(move_string) {\n        var comment = comments[generate_fen()]\n        if (typeof comment !== 'undefined') {\n          var delimiter = move_string.length > 0 ? ' ' : '';\n          move_string = `${move_string}${delimiter}{${comment}}`\n        }\n        return move_string\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = []\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      var moves = []\n      var move_string = ''\n\n      /* special case of a commented starting position with no moves */\n      if (reversed_history.length === 0) {\n        moves.push(append_comment(''))\n      }\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        move_string = append_comment(move_string)\n        var move = reversed_history.pop()\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === 'b') {\n          move_string = move_number + '. ...'\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string)\n          }\n          move_string = move_number + '.'\n        }\n\n        move_string = move_string + ' ' + move_to_san(move, false)\n        make_move(move)\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(append_comment(move_string))\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result)\n      }\n\n      /* history should be back to what it was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ')\n      }\n\n      var strip = function() {\n        if (result.length > 0 && result[result.length - 1] === ' ') {\n          result.pop();\n          return true;\n        }\n        return false;\n      };\n\n      /* NB: this does not preserve comment whitespace. */\n      var wrap_comment = function(width, move) {\n        for (var token of move.split(' ')) {\n          if (!token) {\n            continue;\n          }\n          if (width + token.length > max_width) {\n            while (strip()) {\n              width--;\n            }\n            result.push(newline);\n            width = 0;\n          }\n          result.push(token);\n          width += token.length;\n          result.push(' ');\n          width++;\n        }\n        if (strip()) {\n          width--;\n        }\n        return width;\n      };\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0\n      for (var i = 0; i < moves.length; i++) {\n        if (current_width + moves[i].length > max_width) {\n          if (moves[i].includes('{')) {\n            current_width = wrap_comment(current_width, moves[i]);\n            continue;\n          }\n        }\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop()\n          }\n\n          result.push(newline)\n          current_width = 0\n        } else if (i !== 0) {\n          result.push(' ')\n          current_width++\n        }\n        result.push(moves[i])\n        current_width += moves[i].length\n      }\n\n      return result.join('')\n    },\n\n    load_pgn: function(pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\')\n      }\n\n      function has_keys(object) {\n        for (var key in object) {\n          return true\n        }\n        return false\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char =\n          typeof options === 'object' &&\n          typeof options.newline_char === 'string'\n            ? options.newline_char\n            : '\\r?\\n'\n        var header_obj = {}\n        var headers = header.split(new RegExp(mask(newline_char)))\n        var key = ''\n        var value = ''\n\n        for (var i = 0; i < headers.length; i++) {\n          key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1')\n          value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\ *\\]$/, '$1')\n          if (trim(key).length > 0) {\n            header_obj[key] = value\n          }\n        }\n\n        return header_obj\n      }\n\n      var newline_char =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\r?\\n'\n\n      // RegExp to split header. Takes advantage of the fact that header and movetext\n      // will always have a blank line between them (ie, two newline_char's).\n      // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\r?\\n){2}/\n      var header_regex = new RegExp(\n        '^(\\\\[((?:' +\n          mask(newline_char) +\n          ')|.)*\\\\])' +\n          '(?:' +\n          mask(newline_char) +\n          '){2}'\n      )\n\n      // If no header given, begin with moves.\n      var header_string = header_regex.test(pgn)\n        ? header_regex.exec(pgn)[1]\n        : ''\n\n      // Put the board in the starting position\n      reset()\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options)\n      for (var key in headers) {\n        set_header([key, headers[key]])\n      }\n\n      /* load the starting position indicated by [Setup '1'] and\n       * [FEN position] */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers && load(headers['FEN'], true))) {\n          // second argument to load: don't clear the headers\n          return false\n        }\n      }\n\n      /* NB: the regexes below that delete move numbers, recursive\n       * annotations, and numeric annotation glyphs may also match\n       * text in comments. To prevent this, we transform comments\n       * by hex-encoding them in place and decoding them again after\n       * the other tokens have been deleted.\n       *\n       * While the spec states that PGN files should be ASCII encoded,\n       * we use {en,de}codeURIComponent here to support arbitrary UTF8\n       * as a convenience for modern users */\n\n      var to_hex = function(string) {\n        return Array\n          .from(string)\n          .map(function(c) {\n            /* encodeURI doesn't transform most ASCII characters,\n             * so we handle these ourselves */\n            return c.charCodeAt(0) < 128\n              ? c.charCodeAt(0).toString(16)\n              : encodeURIComponent(c).replace(/\\%/g, '').toLowerCase()\n          })\n          .join('')\n      }\n\n      var from_hex = function(string) {\n        return string.length == 0\n          ? ''\n          : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'))\n      }\n\n      var encode_comment = function(string) {\n        string = string.replace(new RegExp(mask(newline_char), 'g'), ' ')\n        return `{${to_hex(string.slice(1, string.length - 1))}}`\n      }\n\n      var decode_comment = function(string) {\n        if (string.startsWith('{') && string.endsWith('}')) {\n          return from_hex(string.slice(1, string.length - 1))\n        }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn\n        .replace(header_string, '')\n        .replace(\n          /* encode comments so they don't get deleted below */\n          new RegExp(`(\\{[^}]*\\})+?|;([^${mask(newline_char)}]*)`, 'g'),\n          function(match, bracket, semicolon) {\n            return bracket !== undefined\n              ? encode_comment(bracket)\n              : ' ' + encode_comment(`{${semicolon.slice(1)}}`)\n          }\n        )\n        .replace(new RegExp(mask(newline_char), 'g'), ' ')\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '')\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '')\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '')\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/))\n\n      /* delete empty entries */\n      moves = moves\n        .join(',')\n        .replace(/,,+/g, ',')\n        .split(',')\n      var move = ''\n\n      for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n        var comment = decode_comment(moves[half_move])\n        if (comment !== undefined) {\n          comments[generate_fen()] = comment\n          continue\n        }\n        move = move_from_san(moves[half_move], sloppy)\n\n        /* move not possible! (don't clear the board to examine to show the\n         * latest valid position)\n         */\n        if (move == null) {\n          return false\n        } else {\n          make_move(move)\n        }\n      }\n\n      comment = decode_comment(moves[moves.length - 1])\n      if (comment !== undefined) {\n        comments[generate_fen()] = comment\n        moves.pop()\n      }\n\n      /* examine last move */\n      move = moves[moves.length - 1]\n      if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n        if (has_keys(header) && typeof header.Result === 'undefined') {\n          set_header(['Result', move])\n        }\n      } else {\n        move = move_from_san(move, sloppy)\n        if (move == null) {\n          return false\n        } else {\n          make_move(move)\n        }\n      }\n      return true\n    },\n\n    header: function() {\n      return set_header(arguments)\n    },\n\n    ascii: function() {\n      return ascii()\n    },\n\n    turn: function() {\n      return turn\n    },\n\n    move: function(move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      var move_obj = null\n\n      if (typeof move === 'string') {\n        move_obj = move_from_san(move, sloppy)\n      } else if (typeof move === 'object') {\n        var moves = generate_moves()\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (\n            move.from === algebraic(moves[i].from) &&\n            move.to === algebraic(moves[i].to) &&\n            (!('promotion' in moves[i]) ||\n              move.promotion === moves[i].promotion)\n          ) {\n            move_obj = moves[i]\n            break\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj)\n\n      make_move(move_obj)\n\n      return pretty_move\n    },\n\n    undo: function() {\n      var move = undo_move()\n      return move ? make_pretty(move) : null\n    },\n\n    clear: function() {\n      return clear()\n    },\n\n    put: function(piece, square) {\n      return put(piece, square)\n    },\n\n    get: function(square) {\n      return get(square)\n    },\n\n    remove: function(square) {\n      return remove(square)\n    },\n\n    perft: function(depth) {\n      return perft(depth)\n    },\n\n    square_color: function(square) {\n      if (square in SQUARES) {\n        var sq_0x88 = SQUARES[square]\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'\n      }\n\n      return null\n    },\n\n    history: function(options) {\n      var reversed_history = []\n      var move_history = []\n      var verbose =\n        typeof options !== 'undefined' &&\n        'verbose' in options &&\n        options.verbose\n\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop()\n        if (verbose) {\n          move_history.push(make_pretty(move))\n        } else {\n          move_history.push(move_to_san(move))\n        }\n        make_move(move)\n      }\n\n      return move_history\n    },\n\n    get_comment: function() {\n      return comments[generate_fen()];\n    },\n\n    set_comment: function(comment) {\n      comments[generate_fen()] = comment.replace('{', '[').replace('}', ']');\n    },\n\n    delete_comment: function() {\n      var comment = comments[generate_fen()];\n      delete comments[generate_fen()];\n      return comment;\n    },\n\n    get_comments: function() {\n      prune_comments();\n      return Object.keys(comments).map(function(fen) {\n        return {fen: fen, comment: comments[fen]};\n      });\n    },\n\n    delete_comments: function() {\n      prune_comments();\n      return Object.keys(comments)\n        .map(function(fen) {\n          var comment = comments[fen];\n          delete comments[fen];\n          return {fen: fen, comment: comment};\n        });\n    }\n  }\n}\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (typeof exports !== 'undefined') exports.Chess = Chess\n/* export Chess object for any RequireJS compatible environment */\nif (typeof define !== 'undefined')\n  define(function() {\n    return Chess\n  })\n","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import Chess, { ChessInstance } from \"chess.js\";\n\n// Unique identifiers for all 16 pieces. `pa` represents the pawn that starts on\n// the a file, even if it moves to a different file (or is promoted) later in the game.\nexport type PieceId = typeof PieceIds[number];\nexport const PieceIds = [\n  \"pa\",\n  \"pb\",\n  \"pc\",\n  \"pd\",\n  \"pe\",\n  \"pf\",\n  \"pg\",\n  \"ph\",\n  \"ra\",\n  \"rh\",\n  \"nb\",\n  \"ng\",\n  \"bc\",\n  \"bf\",\n  \"k\",\n  \"q\",\n] as const;\n\nexport type Square = typeof Squares[number];\nexport const Squares = [\n  \"a8\",\n  \"b8\",\n  \"c8\",\n  \"d8\",\n  \"e8\",\n  \"f8\",\n  \"g8\",\n  \"h8\",\n  \"a7\",\n  \"b7\",\n  \"c7\",\n  \"d7\",\n  \"e7\",\n  \"f7\",\n  \"g7\",\n  \"h7\",\n  \"a6\",\n  \"b6\",\n  \"c6\",\n  \"d6\",\n  \"e6\",\n  \"f6\",\n  \"g6\",\n  \"h6\",\n  \"a5\",\n  \"b5\",\n  \"c5\",\n  \"d5\",\n  \"e5\",\n  \"f5\",\n  \"g5\",\n  \"h5\",\n  \"a4\",\n  \"b4\",\n  \"c4\",\n  \"d4\",\n  \"e4\",\n  \"f4\",\n  \"g4\",\n  \"h4\",\n  \"a3\",\n  \"b3\",\n  \"c3\",\n  \"d3\",\n  \"e3\",\n  \"f3\",\n  \"g3\",\n  \"h3\",\n  \"a2\",\n  \"b2\",\n  \"c2\",\n  \"d2\",\n  \"e2\",\n  \"f2\",\n  \"g2\",\n  \"h2\",\n  \"a1\",\n  \"b1\",\n  \"c1\",\n  \"d1\",\n  \"e1\",\n  \"f1\",\n  \"g1\",\n  \"h1\",\n] as const;\n\n// Mapping from each piece to the square where it currently resides (or null if it has been taken)\ntype Position = { [k in PieceId]: Square | null };\n\nexport interface Move {\n  piece: PieceId;\n  destination: Square;\n}\n\nexport type Outcome =\n  | {\n      outcome: \"white wins\" | \"black wins\";\n      reason: \"checkmate\" | \"forfeit\";\n    }\n  | {\n      outcome: \"draw\";\n      reason:\n        | \"threefold repetition\"\n        | \"stalemate\"\n        | \"insufficient material\"\n        | \"fifty move rule\";\n    };\n\nexport class Permiscuchess {\n  private game: ChessInstance;\n  private positions: { w: Position; b: Position };\n\n  constructor() {\n    this.game = new ((Chess as unknown) as typeof Chess.Chess)(); // types are wrong here\n\n    const WHITE_START: Position = {\n      pa: \"a2\",\n      pb: \"b2\",\n      pc: \"c2\",\n      pd: \"d2\",\n      pe: \"e2\",\n      pf: \"f2\",\n      pg: \"g2\",\n      ph: \"h2\",\n      ra: \"a1\",\n      rh: \"h1\",\n      nb: \"b1\",\n      ng: \"g1\",\n      bc: \"c1\",\n      bf: \"f1\",\n      k: \"e1\",\n      q: \"d1\",\n    };\n\n    const BLACK_START: Position = {\n      pa: \"a7\",\n      pb: \"b7\",\n      pc: \"c7\",\n      pd: \"d7\",\n      pe: \"e7\",\n      pf: \"f7\",\n      pg: \"g7\",\n      ph: \"h7\",\n      ra: \"a8\",\n      rh: \"h8\",\n      nb: \"b8\",\n      ng: \"g8\",\n      bc: \"c8\",\n      bf: \"f8\",\n      k: \"e8\",\n      q: \"d8\",\n    };\n\n    this.positions = {\n      [this.game.WHITE]: WHITE_START,\n      [this.game.BLACK]: BLACK_START,\n    };\n  }\n\n  private move(mv: Move) {\n    const turn = this.game.turn();\n    const position = this.positions[turn];\n    const oldPosition = position[mv.piece];\n    if (!oldPosition) {\n      return false;\n    }\n\n    const destinationIsOnLastRank =\n      mv.destination.endsWith(\"1\") || mv.destination.endsWith(\"8\");\n    const isPawn = this.game.get(oldPosition)?.type === \"p\";\n    const moveResult = this.game.move({\n      from: oldPosition,\n      to: mv.destination,\n      promotion: destinationIsOnLastRank && isPawn ? \"q\" : undefined,\n    });\n    if (!moveResult) {\n      return false;\n    }\n    position[mv.piece] = mv.destination;\n    return true;\n  }\n\n  public play(whiteMoves: Move[], blackMoves: Move[]): Outcome {\n    const moves = {\n      [this.game.WHITE]: {\n        ix: 0,\n        moves: whiteMoves,\n      },\n      [this.game.BLACK]: {\n        ix: 0,\n        moves: blackMoves,\n      },\n    };\n    while (!this.game.game_over()) {\n      const turn = this.game.turn();\n      const availableMoves = this.game.moves({ verbose: true });\n      let nLoopsAround = 0;\n      while (true) {\n        const moveIx = moves[turn][\"ix\"];\n        const move = moves[turn][\"moves\"][moveIx];\n        moves[turn][\"ix\"] += 1;\n        moves[turn][\"ix\"] %= moves[turn][\"moves\"].length;\n        if (moves[turn][\"ix\"] === 0) {\n          nLoopsAround++; // if we hit move 0 twice before moving on to the next player, we weren't able to make a move. That's a forfeit.\n        }\n        if (nLoopsAround === 2) {\n          return {\n            outcome: this.game.turn() === \"w\" ? \"black wins\" : \"white wins\",\n            reason: \"forfeit\",\n          };\n        }\n        if (\n          availableMoves.find(\n            (m) =>\n              m.from === this.positions[turn][move.piece] &&\n              m.to === move.destination\n          )\n        ) {\n          this.move(move);\n          break;\n        }\n      }\n    }\n\n    if (this.game.in_checkmate()) {\n      return {\n        outcome: this.game.turn() === \"w\" ? \"black wins\" : \"white wins\",\n        reason: \"checkmate\",\n      };\n    }\n    return {\n      outcome: \"draw\",\n      reason: this.game.in_threefold_repetition()\n        ? \"threefold repetition\"\n        : this.game.in_stalemate()\n        ? \"stalemate\"\n        : this.game.insufficient_material()\n        ? \"insufficient material\"\n        : \"fifty move rule\",\n    };\n  }\n\n  public fen() {\n    return this.game.fen();\n  }\n\n  public pgn() {\n    return this.game.pgn();\n  }\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { PieceIds, Squares } from \"./game\";\n\n// including impossible bishop moves (for now)\nexport const ALL_POSSIBLE_MOVES = PieceIds.flatMap((pieceId) => {\n  return Squares.map((s) => {\n    return {\n      piece: pieceId,\n      destination: s,\n    };\n  });\n});\n\nexport const randomStrategy = () => {\n  return shuffled(ALL_POSSIBLE_MOVES);\n};\n\nfunction shuffled<T>(inArr: T[]): T[] {\n  const outArr = [...inArr];\n  for (let i = outArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [outArr[i], outArr[j]] = [outArr[j], outArr[i]];\n  }\n  return outArr;\n}\n","import { Permiscuchess, Move } from \"./game\";\nimport { randomStrategy } from \"./utils\";\n\nexport type ChessWorkerInput = {\n  whiteMoves: Move[] | undefined;\n  blackMoves: Move[] | undefined;\n};\n\nexport interface GameResult {\n  outcome: \"White wins\" | \"Black wins\" | \"Draw\";\n  by:\n    | \"threefold repetition\"\n    | \"stalemate\"\n    | \"insufficient material\"\n    | \"fifty move rule\"\n    | \"checkmate\"\n    | \"forfeit\";\n  whiteStrategy: Move[];\n  blackStrategy: Move[];\n  fen: string;\n  pgn: string;\n}\n\nonmessage = (msg: MessageEvent<ChessWorkerInput>) => {\n  const blackStrategy = msg.data.blackMoves ?? randomStrategy();\n  const whiteStrategy = msg.data.whiteMoves ?? randomStrategy();\n\n  const game = new Permiscuchess();\n  const result = game.play(whiteStrategy, blackStrategy);\n\n  const messageToReturn: GameResult = {\n    pgn: game.pgn(),\n    fen: game.fen(),\n    whiteStrategy,\n    blackStrategy,\n    outcome:\n      result.outcome === \"draw\"\n        ? \"Draw\"\n        : result.outcome === \"white wins\"\n        ? \"White wins\"\n        : \"Black wins\",\n    by: result.reason,\n  };\n  // @ts-expect-error\n  postMessage(messageToReturn); // TODO – change on production; maybe window.opener.location?\n};\n"],"sourceRoot":""}