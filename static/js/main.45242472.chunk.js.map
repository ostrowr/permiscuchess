{"version":3,"sources":["engine/worker.ts","play-game-button.tsx","engine/game.ts","engine/utils.ts","history/historyTable.tsx","history/statsModal.tsx","history/historyCard.tsx","rules.tsx","title.tsx","strategy/strategyTable.tsx","strategy/moveSerialization.ts","strategy/editStrategyModal.tsx","strategy/strategyCard.tsx","board/pgnModal.tsx","strategy/strategyModal.tsx","board/boardCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Worker_fn","Worker","webWorkers","workers","nWorkers","navigator","hardwareConcurrency","i","console","log","push","instantiateWorkers","PlayGameButton","props","webWorkersSupported","window","onGameComplete","useEffect","forEach","w","onmessage","msg","data","Button","disabled","length","onClick","nGamesToSimulate","onSimulationStart","postMessage","strategies","PendingSpinner","nPending","simulations","Spinner","animation","size","PieceIds","Squares","ALL_POSSIBLE_MOVES","flatMap","pieceId","map","s","piece","destination","randomStrategy","inArr","outArr","j","Math","floor","random","shuffled","HistoryTable","header","rows","games","g","onRowClick","outcome","by","Alert","variant","Table","bordered","hover","reverse","StatsModal","nWhiteWins","filter","p","nBlackWins","nDraws","whitePercentage","toFixed","blackPercentage","drawPercentage","x","y","name","type","Modal","show","onHide","Header","closeButton","Title","Body","Jumbotron","style","padding","layout","barmode","width","HistoryCard","useState","statsModalOpen","setStatsModalOpen","csvData","pgn","Card","height","Subtitle","Text","ButtonGroup","setGames","filename","maxHeight","overflow","game","gameIndex","setCurrentGame","Rules","showRules","setShowRules","StrategyTable","moves","move","ix","id","pieceToDisplayName","dataKey","title","pieceType","n","q","r","b","k","textToMove","t","split","includes","Error","assertValidPiece","square","assertValidSquare","EditStrategyModal","strategyFromProps","strategy","undefined","currStrategy","setCurrStrategy","strategyAsText","join","validStrategy","textStrategy","f","e","validateTextStrategy","Container","Row","Col","value","onChange","target","placeholder","spellCheck","Footer","onSave","StrategyCard","editModalOpen","setEditModalOpen","color","cursor","setStrategyFor","prev","strategyFor","setStrategy","draggable","PGNModal","lichessLoading","setLichessLoading","clipboard","writeText","a","fetch","method","body","URLSearchParams","result","json","url","open","StrategyModal","display","justifyContent","BoardCard","pgnForModal","setPgnForModal","strategyForModal","setStrategyForModal","whiteStrategy","blackStrategy","position","fen","boardStyle","borderRadius","boxShadow","App","currentGame","numCurrentlySimulating","setNumCurrentlySimulating","setNGamesToSimulate","fluid","gameResult","blackMoves","whiteMoves","parseInt","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45242472.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/worker.d69aae68.worker.js\");\n}\n","import Button from \"react-bootstrap/Button\";\nimport { ChessWorkerInput, GameResult } from \"./engine/worker\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\n// @ts-expect-error\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport Worker from \"worker-loader!./engine/worker.ts\";\nimport { useEffect } from \"react\";\n\ninterface IProps {\n  strategies: ChessWorkerInput;\n  nGamesToSimulate: number;\n  onGameComplete: (outcome: GameResult) => void;\n  onSimulationStart: () => void;\n}\n\nconst instantiateWorkers = () => {\n  const workers: Worker[] = [];\n  const nWorkers = navigator.hardwareConcurrency;\n  for (let i = 0; i < nWorkers; i++) {\n    console.log(\"instantiating new worker\");\n    workers.push(new Worker());\n  }\n  return workers;\n};\n\n// should probably pull out of global state\nconst webWorkers = instantiateWorkers();\n\nexport const PlayGameButton: React.FC<IProps> = (props) => {\n  const webWorkersSupported = !!window.Worker;\n  const { onGameComplete } = props;\n  useEffect(() => {\n    webWorkers.forEach(\n      (w) =>\n        (w.onmessage = (msg: MessageEvent<GameResult>) =>\n          onGameComplete(msg.data))\n    );\n  }, [onGameComplete]);\n\n  return (\n    <>\n      <Button\n        disabled={webWorkers.length === 0}\n        onClick={() => {\n          for (let i = 0; i < props.nGamesToSimulate; i++) {\n            props.onSimulationStart();\n            // simplest possible scheduling algorithm; just rotate workers.\n            // not sure if this is actually faster than just 1 worker; need\n            // to test! Or maybe use in some sort of proper pool.\n            webWorkers[i % webWorkers.length].postMessage(props.strategies);\n          }\n        }}\n      >\n        Simulate {props.nGamesToSimulate} game\n        {props.nGamesToSimulate === 1 ? \"\" : \"s\"}\n        {webWorkersSupported ? \"\" : \" (cannot simulate; no web workers)\"}\n      </Button>\n    </>\n  );\n};\n\nexport const PendingSpinner: React.FC<{ nPending: number }> = (props) => {\n  if (props.nPending === 0) {\n    return null;\n  }\n  const simulations = props.nPending === 1 ? \"simulation\" : \"simulations\";\n  return (\n    <>\n      <Spinner animation=\"grow\" size=\"sm\" />{\" \"}\n      <span>{` ${props.nPending} ${simulations} pending...`}</span>\n    </>\n  );\n};\n","import Chess, { ChessInstance } from \"chess.js\";\n\n// Unique identifiers for all 16 pieces. `pa` represents the pawn that starts on\n// the a file, even if it moves to a different file (or is promoted) later in the game.\nexport type PieceId = typeof PieceIds[number];\nexport const PieceIds = [\n  \"pa\",\n  \"pb\",\n  \"pc\",\n  \"pd\",\n  \"pe\",\n  \"pf\",\n  \"pg\",\n  \"ph\",\n  \"ra\",\n  \"rh\",\n  \"nb\",\n  \"ng\",\n  \"bc\",\n  \"bf\",\n  \"k\",\n  \"q\",\n] as const;\n\nexport type Square = typeof Squares[number];\nexport const Squares = [\n  \"a8\",\n  \"b8\",\n  \"c8\",\n  \"d8\",\n  \"e8\",\n  \"f8\",\n  \"g8\",\n  \"h8\",\n  \"a7\",\n  \"b7\",\n  \"c7\",\n  \"d7\",\n  \"e7\",\n  \"f7\",\n  \"g7\",\n  \"h7\",\n  \"a6\",\n  \"b6\",\n  \"c6\",\n  \"d6\",\n  \"e6\",\n  \"f6\",\n  \"g6\",\n  \"h6\",\n  \"a5\",\n  \"b5\",\n  \"c5\",\n  \"d5\",\n  \"e5\",\n  \"f5\",\n  \"g5\",\n  \"h5\",\n  \"a4\",\n  \"b4\",\n  \"c4\",\n  \"d4\",\n  \"e4\",\n  \"f4\",\n  \"g4\",\n  \"h4\",\n  \"a3\",\n  \"b3\",\n  \"c3\",\n  \"d3\",\n  \"e3\",\n  \"f3\",\n  \"g3\",\n  \"h3\",\n  \"a2\",\n  \"b2\",\n  \"c2\",\n  \"d2\",\n  \"e2\",\n  \"f2\",\n  \"g2\",\n  \"h2\",\n  \"a1\",\n  \"b1\",\n  \"c1\",\n  \"d1\",\n  \"e1\",\n  \"f1\",\n  \"g1\",\n  \"h1\",\n] as const;\n\n// Mapping from each piece to the square where it currently resides (or null if it has been taken)\ntype Position = { [k in PieceId]: Square | null };\n\nexport interface Move {\n  piece: PieceId;\n  destination: Square;\n}\n\nexport type Outcome =\n  | {\n      outcome: \"white wins\" | \"black wins\";\n      reason: \"checkmate\" | \"forfeit\";\n    }\n  | {\n      outcome: \"draw\";\n      reason:\n        | \"threefold repetition\"\n        | \"stalemate\"\n        | \"insufficient material\"\n        | \"fifty move rule\";\n    };\n\nexport class Permiscuchess {\n  private game: ChessInstance;\n  private positions: { w: Position; b: Position };\n\n  constructor() {\n    this.game = new ((Chess as unknown) as typeof Chess.Chess)(); // types are wrong here\n\n    const WHITE_START: Position = {\n      pa: \"a2\",\n      pb: \"b2\",\n      pc: \"c2\",\n      pd: \"d2\",\n      pe: \"e2\",\n      pf: \"f2\",\n      pg: \"g2\",\n      ph: \"h2\",\n      ra: \"a1\",\n      rh: \"h1\",\n      nb: \"b1\",\n      ng: \"g1\",\n      bc: \"c1\",\n      bf: \"f1\",\n      k: \"e1\",\n      q: \"d1\",\n    };\n\n    const BLACK_START: Position = {\n      pa: \"a7\",\n      pb: \"b7\",\n      pc: \"c7\",\n      pd: \"d7\",\n      pe: \"e7\",\n      pf: \"f7\",\n      pg: \"g7\",\n      ph: \"h7\",\n      ra: \"a8\",\n      rh: \"h8\",\n      nb: \"b8\",\n      ng: \"g8\",\n      bc: \"c8\",\n      bf: \"f8\",\n      k: \"e8\",\n      q: \"d8\",\n    };\n\n    this.positions = {\n      [this.game.WHITE]: WHITE_START,\n      [this.game.BLACK]: BLACK_START,\n    };\n  }\n\n  private move(mv: Move) {\n    const turn = this.game.turn();\n    const position = this.positions[turn];\n    const oldPosition = position[mv.piece];\n    if (!oldPosition) {\n      return false;\n    }\n\n    const destinationIsOnLastRank =\n      mv.destination.endsWith(\"1\") || mv.destination.endsWith(\"8\");\n    const isPawn = this.game.get(oldPosition)?.type === \"p\";\n    const moveResult = this.game.move({\n      from: oldPosition,\n      to: mv.destination,\n      promotion: destinationIsOnLastRank && isPawn ? \"q\" : undefined,\n    });\n    if (!moveResult) {\n      return false;\n    }\n    position[mv.piece] = mv.destination;\n    return true;\n  }\n\n  public play(whiteMoves: Move[], blackMoves: Move[]): Outcome {\n    const moves = {\n      [this.game.WHITE]: {\n        ix: 0,\n        moves: whiteMoves,\n      },\n      [this.game.BLACK]: {\n        ix: 0,\n        moves: blackMoves,\n      },\n    };\n    while (!this.game.game_over()) {\n      const turn = this.game.turn();\n      const availableMoves = this.game.moves({ verbose: true });\n      let nLoopsAround = 0;\n      while (true) {\n        const moveIx = moves[turn][\"ix\"];\n        const move = moves[turn][\"moves\"][moveIx];\n        moves[turn][\"ix\"] += 1;\n        moves[turn][\"ix\"] %= moves[turn][\"moves\"].length;\n        if (moves[turn][\"ix\"] === 0) {\n          nLoopsAround++; // if we hit move 0 twice before moving on to the next player, we weren't able to make a move. That's a forfeit.\n        }\n        if (nLoopsAround === 2) {\n          return {\n            outcome: this.game.turn() === \"w\" ? \"black wins\" : \"white wins\",\n            reason: \"forfeit\",\n          };\n        }\n        if (\n          availableMoves.find(\n            (m) =>\n              m.from === this.positions[turn][move.piece] &&\n              m.to === move.destination\n          )\n        ) {\n          this.move(move);\n          break;\n        }\n      }\n    }\n\n    if (this.game.in_checkmate()) {\n      return {\n        outcome: this.game.turn() === \"w\" ? \"black wins\" : \"white wins\",\n        reason: \"checkmate\",\n      };\n    }\n    return {\n      outcome: \"draw\",\n      reason: this.game.in_threefold_repetition()\n        ? \"threefold repetition\"\n        : this.game.in_stalemate()\n        ? \"stalemate\"\n        : this.game.insufficient_material()\n        ? \"insufficient material\"\n        : \"fifty move rule\",\n    };\n  }\n\n  public fen() {\n    return this.game.fen();\n  }\n\n  public pgn() {\n    return this.game.pgn();\n  }\n}\n","import { PieceIds, Squares } from \"./game\";\n\n// including impossible bishop moves (for now)\nexport const ALL_POSSIBLE_MOVES = PieceIds.flatMap((pieceId) => {\n  return Squares.map((s) => {\n    return {\n      piece: pieceId,\n      destination: s,\n    };\n  });\n});\n\nexport const randomStrategy = () => {\n  return shuffled(ALL_POSSIBLE_MOVES);\n};\n\nfunction shuffled<T>(inArr: T[]): T[] {\n  const outArr = [...inArr];\n  for (let i = outArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [outArr[i], outArr[j]] = [outArr[j], outArr[i]];\n  }\n  return outArr;\n}\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { GameResult } from \"../engine/worker\";\n\nexport const HistoryTable: React.FC<{\n  games: GameResult[];\n  onRowClick: (game: GameResult, gameNumber: number) => void;\n}> = (props) => {\n  const header = (\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Outcome</th>\n        <th>By</th>\n      </tr>\n    </thead>\n  );\n  const rows = props.games.map((g, i) => {\n    return (\n      <tr key={i} onClick={() => props.onRowClick(g, i)}>\n        <td>{i}</td>\n        <td>{g.outcome}</td>\n        <td>{g.by}</td>\n      </tr>\n    );\n  });\n  if (rows.length === 0) {\n    return <Alert variant={\"info\"}>No games played yet!</Alert>;\n  }\n\n  return (\n    <Table bordered hover size=\"sm\">\n      {header}\n      <tbody>{rows.reverse()}</tbody>\n    </Table>\n  );\n};\n","import React from \"react\";\nimport { GameResult } from \"../engine/worker\";\nimport Plot from \"react-plotly.js\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\ninterface IProps {\n  games: GameResult[];\n  show: boolean;\n  onHide: () => void;\n}\n\nexport const StatsModal: React.FC<IProps> = (props) => {\n  const nWhiteWins = props.games.filter((p) => p.outcome === \"White wins\")\n    .length;\n  const nBlackWins = props.games.filter((p) => p.outcome === \"Black wins\")\n    .length;\n  const nDraws = props.games.filter((p) => p.outcome === \"Draw\").length;\n\n  const whitePercentage = ((nWhiteWins * 100) / props.games.length).toFixed(1);\n  const blackPercentage = ((nBlackWins * 100) / props.games.length).toFixed(1);\n  const drawPercentage = ((nDraws * 100) / props.games.length).toFixed(1);\n\n  const checkmate = {\n    x: [\"White wins\", \"Black wins\"],\n    y: [nWhiteWins, nBlackWins],\n    name: \"checkmate/forfeit\",\n    type: \"bar\" as const,\n  };\n\n  const fiftyMoveRule = {\n    x: [\"Draw\"],\n    y: [props.games.filter((p) => p.by === \"fifty move rule\").length],\n    name: \"fifty move rule\",\n    type: \"bar\" as const,\n  };\n\n  const stalemate = {\n    x: [\"Draw\"],\n    y: [props.games.filter((p) => p.by === \"stalemate\").length],\n    name: \"stalemate\",\n    type: \"bar\" as const,\n  };\n\n  const insufficientMaterial = {\n    x: [\"Draw\"],\n    y: [props.games.filter((p) => p.by === \"insufficient material\").length],\n    name: \"insufficient material\",\n    type: \"bar\" as const,\n  };\n\n  const threefold = {\n    x: [\"Draw\"],\n    y: [props.games.filter((p) => p.by === \"threefold repetition\").length],\n    name: \"threefold repetiion\",\n    type: \"bar\" as const,\n  };\n\n  const data = [\n    checkmate,\n    fiftyMoveRule,\n    stalemate,\n    insufficientMaterial,\n    threefold,\n  ];\n\n  const layout = {\n    barmode: \"stack\",\n    width: 480,\n  } as const;\n\n  return (\n    <Modal show={props.show} onHide={props.onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Stats</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {props.games.length > 0 ? (\n          <>\n            <Jumbotron style={{ padding: 10 }}>\n              <h4>\n                White: {whitePercentage}%; Black: {blackPercentage}%; Draw:{\" \"}\n                {drawPercentage}%\n              </h4>\n            </Jumbotron>\n            <Plot data={data} layout={layout} />\n          </>\n        ) : (\n          <Jumbotron style={{ padding: 10 }}>\n            <h4>No games played</h4>\n          </Jumbotron>\n        )}\n      </Modal.Body>\n    </Modal>\n  );\n};\n","import React, { useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { GameResult } from \"../engine/worker\";\nimport Button from \"react-bootstrap/Button\";\nimport { HistoryTable } from \"./historyTable\";\nimport { StatsModal } from \"./statsModal\";\nimport { CSVLink } from \"react-csv\";\n\ninterface IProps {\n  setGames: (games: GameResult[]) => void;\n  games: GameResult[];\n  setCurrentGame: (game: GameResult & { gameIndex: number }) => void;\n}\n\nexport const HistoryCard: React.FC<IProps> = (props) => {\n  const [statsModalOpen, setStatsModalOpen] = useState(false);\n\n  // we don't really need to recompute this every time; investigate if\n  // we should just compute everything when the download button is clicked!\n  const csvHeaders = [\"#\", \"Outcome\", \"By\", \"PGN\"];\n  const csvData = props.games.map((g, i) => [i, g.outcome, g.by, g.pgn]);\n  return (\n    <>\n      <Card style={{ height: 500 }}>\n        <Card.Body>\n          <Card.Title>History</Card.Title>\n          <Card.Subtitle>All games played</Card.Subtitle>\n          <Card.Text>\n            <ButtonGroup>\n              <Button\n                onClick={() => props.setGames([])}\n                size=\"sm\"\n                variant=\"info\"\n              >\n                Clear\n              </Button>\n              <Button\n                onClick={() => setStatsModalOpen(true)}\n                size=\"sm\"\n                variant=\"light\"\n              >\n                Stats\n              </Button>\n              <CSVLink\n                data={[csvHeaders, ...csvData]}\n                filename={\"permiscuchess-results.csv\"}\n              >\n                <Button size=\"sm\" variant=\"dark\">\n                  Download\n                </Button>\n              </CSVLink>\n            </ButtonGroup>\n          </Card.Text>\n          <div style={{ maxHeight: 350, overflow: \"scroll\" }}>\n            <HistoryTable\n              games={props.games}\n              onRowClick={(game: GameResult, gameIndex: number) =>\n                props.setCurrentGame({ ...game, gameIndex })\n              }\n            />\n          </div>\n        </Card.Body>\n      </Card>\n      <StatsModal\n        games={props.games}\n        onHide={() => setStatsModalOpen(false)}\n        show={statsModalOpen}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\ninterface IProps {\n  show: boolean;\n  onHide: () => void;\n}\nexport const Rules: React.FC<IProps> = (props) => {\n  return (\n    <Modal show={props.show} onHide={props.onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>How to Play</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Permiscuchess is a chess variant that is entirely pre-played. Instead\n          of a real-time battle of wits, Permiscuchess is played by devising a\n          clever strategy.\n        </p>\n        <h2>Defining a strategy</h2>\n        <p>\n          Each piece on a Permiscuchess board is labeled according to its\n          starting file. For example, <code>pb</code> is the pawn that starts on\n          file <code>b</code>. <code>pb</code> will continue to identify that\n          pawn throughout the game, even if it moves off of the <code>b</code>{\" \"}\n          file or if it is promoted.\n        </p>\n        <p>\n          A strategy is just a list of moves specifying a piece and a\n          destination square. For example, <code>pa:b5</code> is a move that\n          says \"move the piece with identifier <code>pa</code> to square{\" \"}\n          <code>b5</code>.\"\n        </p>\n        <p>\n          Most moves in your strategy are likely to be illegal at most points in\n          the game. Each turn, the computer chooses the next legal move in your\n          strategy, looping around if it gets to the end.\n        </p>\n        <p>\n          There are 960 possible permiscuchess moves. All pieces except bishops\n          can explore the whole board, and bishops can only explore their color.\n          You may repeat moves in your strategy – that is, your strategy does\n          not need to be exactly 960 moves long.\n        </p>\n        <p>\n          The piece identifiers are:\n          <p>\n            <code>\n              Pawns: pa pb pc pd pe pf pg ph <br />\n              Rooks: ra rh <br />\n              Knights: nb ng <br />\n              Bishops: bc bf <br />\n              King: k <br />\n              Queen: q <br />\n            </code>\n          </p>\n        </p>\n        <h2>Gameplay</h2>\n        The computer plays a single turn in Permiscuchess by following these\n        steps:\n        <ol>\n          <li>\n            Select the next legal move in the current player's strategy, looping\n            to the beginning if necessary. If there are no legal moves in the\n            whole strategy, the current player forfeits.\n          </li>\n          <li>Make the move.</li>\n          <li>\n            If the move ended in checkmate or draw (by threefold repetition,\n            stalemate, insufficient material, or 50 moves without a capture),\n            end the game.\n          </li>\n          <li>Go to the other player's turn and repeat.</li>\n        </ol>\n        Permiscuchess is played just like normal chess, with a few caveats:\n        <ul>\n          <li>\n            If a pawn reaches the eigth rank, it is automatically promoted to a\n            queen.\n          </li>\n          <li>There is no castling.</li>\n        </ul>\n        <h2>Tips</h2>\n        <ol>\n          <li>\n            You should never have to forfeit. There are only 960 possible moves,\n            and at least one of them must be legal until the game is over!\n            \"Randomize\" just shuffles those moves for you.\n          </li>\n          <li>\n            On average, random strategies playing against one another each win\n            about 13% of the time, with the remaining 74% of games drawn. Can\n            you find a strategy that wins 20% of its games? Click on \"Stats\" to\n            see how you're doing.\n          </li>\n          <li>\n            You can adjust the slider at the bottom to simulate between 1 and\n            1000 games at a time against randomly generated opponents.\n          </li>\n          <li>\n            Try clicking on the PGN of a game you're viewing to view it in\n            Lichess!\n          </li>\n        </ol>\n      </Modal.Body>\n    </Modal>\n  );\n};\n","import React, { useState } from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { Rules } from \"./rules\";\n\nexport const Title: React.FC = (props) => {\n  const [showRules, setShowRules] = useState(false);\n  return (\n    <>\n      <Jumbotron style={{ padding: 10 }}>\n        <h1>Permiscuchess</h1>\n        <p>By Robbie Ostrow</p>\n        <Button\n          variant=\"outline-primary\"\n          size=\"sm\"\n          onClick={() => setShowRules(true)}\n        >\n          How to Play\n        </Button>\n      </Jumbotron>\n      <Rules show={showRules} onHide={() => setShowRules(false)} />\n    </>\n  );\n};\n","import React from \"react\";\nimport BaseTable, { Column } from \"react-base-table\";\nimport { Move, PieceId } from \"../engine/game\";\n\ninterface IProps {\n  moves: Move[];\n  draggable: boolean; // todo!! https://autodesk.github.io/react-base-table/examples/draggable-rows\n}\n\nexport const StrategyTable: React.FC<IProps> = (props) => {\n  const data = props.moves.map((move, ix) => {\n    return {\n      id: ix + 1,\n      piece: <strong>{pieceToDisplayName(move.piece)}</strong>,\n      destination: <strong>{move.destination}</strong>,\n    };\n  });\n  return (\n    <BaseTable data={data} width={360} height={350}>\n      <Column key=\"id\" dataKey=\"id\" width={100} title={\"Turn\"} />\n      <Column key=\"piece\" dataKey=\"piece\" width={100} title={\"Piece\"} />\n      <Column\n        key=\"destination\"\n        dataKey=\"destination\"\n        width={100}\n        title={\"Destination\"}\n      />\n    </BaseTable>\n  );\n};\n\nconst pieceToDisplayName = (p: PieceId) => {\n  const letterToPiece: { [k: string]: string } = {\n    n: \"Knight\",\n    q: \"Queen\",\n    p: \"Pawn\",\n    r: \"Rook\",\n    b: \"Bishop\",\n    k: \"King\",\n  };\n  const pieceType = letterToPiece[p[0]];\n  if (p.length === 1) {\n    return pieceType;\n  }\n  return `${pieceType} (${p[1]})`;\n};\n","import { Move, PieceId, PieceIds, Squares, Square } from \"../engine/game\";\n\nexport const moveToText = (m: Move): string => {\n  return `${m.piece}:${m.destination}`;\n};\n\nfunction assertValidPiece(piece: string): asserts piece is PieceId {\n  if (!PieceIds.includes(piece as PieceId)) {\n    throw new Error(`Invalid piece identifier: ${piece}`);\n  }\n}\n\nfunction assertValidSquare(square: string): asserts square is Square {\n  if (!Squares.includes(square as Square)) {\n    throw new Error(`Invalid square: ${square}`);\n  }\n}\n\nexport const textToMove = (t: string): Move => {\n  const [piece, destination] = t.split(\":\");\n  assertValidPiece(piece);\n  assertValidSquare(destination);\n  return {\n    piece,\n    destination,\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport { Move } from \"../engine/game\";\nimport { textToMove } from \"./moveSerialization\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\ninterface IProps {\n  show: boolean;\n  strategy: Move[] | undefined;\n  onHide: () => void;\n  onSave: (moves: Move[]) => void;\n}\n\nconst validateTextStrategy = (\n  textStrategy: string | undefined\n): Move[] | false => {\n  if (!textStrategy) {\n    return false;\n  }\n  const moves = textStrategy.split(/\\s+/).filter((f) => f.length > 0);\n  try {\n    return moves.map(textToMove);\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const EditStrategyModal: React.FC<IProps> = (props) => {\n  const { strategy: strategyFromProps } = props;\n\n  const [currStrategy, setCurrStrategy] = useState<string | undefined>(\n    undefined\n  );\n  useEffect(() => {\n    const strategyAsText = strategyFromProps\n      ?.map((p) => [`${p.piece}:${p.destination}`])\n      .join(\"\\n\");\n    setCurrStrategy(strategyAsText);\n  }, [strategyFromProps]);\n\n  const validStrategy = validateTextStrategy(currStrategy);\n  return (\n    <>\n      <Modal show={props.show} onHide={props.onHide}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Strategy</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Container>\n            <Row>\n              <Col>Edit your strategy by adding or re-ordering moves here.</Col>\n              <Col>\n                <textarea\n                  value={currStrategy}\n                  onChange={(e) => setCurrStrategy(e.target.value)}\n                  rows={20}\n                  placeholder=\"paste strategy here\"\n                  spellCheck={false}\n                ></textarea>\n              </Col>\n            </Row>\n          </Container>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"secondary\"\n            disabled={!validStrategy}\n            onClick={() => {\n              if (!validStrategy) {\n                return;\n              }\n              props.onSave(validStrategy);\n            }}\n          >\n            {validStrategy ? \"Save\" : \"Invalid strategy\"}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { randomStrategy } from \"../engine/utils\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { StrategyTable } from \"./strategyTable\";\nimport { Move } from \"../engine/game\";\nimport { CSVLink } from \"react-csv\";\nimport { EditStrategyModal } from \"./editStrategyModal\";\n\ninterface IProps {\n  strategy: Move[];\n  strategyFor: \"w\" | \"b\" | null;\n  setStrategy: React.Dispatch<React.SetStateAction<Move[]>>;\n  setStrategyFor: React.Dispatch<React.SetStateAction<\"w\" | \"b\" | null>>;\n}\n\nexport const StrategyCard: React.FC<IProps> = (props) => {\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const strategyAsText = props.strategy.map((p) => [\n    `${p.piece}:${p.destination}`,\n  ]);\n  return (\n    <>\n      <Card style={{ height: 500 }}>\n        <Card.Body>\n          <Card.Title>Strategy</Card.Title>\n          <Card.Subtitle>\n            Setting strategy for{\" \"}\n            <span\n              style={{ color: \"gray\", cursor: \"pointer\" }}\n              onClick={() =>\n                props.setStrategyFor((prev) =>\n                  prev === \"w\" ? \"b\" : prev === \"b\" ? null : \"w\"\n                )\n              }\n            >\n              {props.strategyFor === \"w\"\n                ? \"white\"\n                : props.strategyFor === \"b\"\n                ? \"black\"\n                : \"neither player\"}\n            </span>\n          </Card.Subtitle>\n          {props.strategyFor !== null ? (\n            <>\n              <Card.Text>\n                <ButtonGroup>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => props.setStrategy(randomStrategy())}\n                    variant=\"info\"\n                  >\n                    Randomize\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setEditModalOpen(true)}\n                    variant=\"light\"\n                  >\n                    Edit\n                  </Button>\n                  <CSVLink // probably should download directly, not with csvlink\n                    data={strategyAsText}\n                    filename={\"permiscuchess-strategy.txt\"}\n                  >\n                    <Button size=\"sm\" variant=\"dark\">\n                      Export\n                    </Button>\n                  </CSVLink>\n                </ButtonGroup>\n              </Card.Text>\n              <StrategyTable moves={props.strategy} draggable={true} />\n            </>\n          ) : (\n            <Alert variant={\"info\"}>\n              Both players are playing randomly. Click \"neither player\" above to\n              set a strategy for Black or White.\n            </Alert>\n          )}\n        </Card.Body>\n      </Card>\n      <EditStrategyModal\n        show={editModalOpen}\n        onHide={() => setEditModalOpen(false)}\n        onSave={(moves: Move[]) => {\n          props.setStrategy(moves);\n          setEditModalOpen(false);\n        }}\n        strategy={props.strategy}\n      />\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\ninterface IProps {\n  show: boolean;\n  pgn: string | undefined;\n  onHide: () => void;\n}\n\nexport const PGNModal: React.FC<IProps> = (props) => {\n  const [lichessLoading, setLichessLoading] = useState(false);\n  return (\n    <Modal show={props.show} onHide={props.onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>PGN</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>{props.pgn}</Modal.Body>\n      <Modal.Footer>\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            if (props.pgn) {\n              navigator.clipboard.writeText(props.pgn);\n            }\n          }}\n        >\n          Copy\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={lichessLoading}\n          onClick={async () => {\n            setLichessLoading(true);\n            const result = await fetch(\"https://lichess.org/api/import\", {\n              method: \"POST\",\n              body: new URLSearchParams({ pgn: props.pgn! }),\n            });\n            const { url } = await result.json();\n            setLichessLoading(false);\n            window.open(url);\n          }}\n        >\n          Open in Lichess\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport { Move } from \"../engine/game\";\nimport { StrategyTable } from \"./strategyTable\";\n\ninterface IProps {\n  show: boolean;\n  strategy: Move[] | undefined;\n  onHide: () => void;\n}\n\nexport const StrategyModal: React.FC<IProps> = (props) => {\n  return (\n    <Modal show={props.show} onHide={props.onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Strategy</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n          }}\n        >\n          {props.strategy ? (\n            <StrategyTable moves={props.strategy} draggable={false} />\n          ) : null}\n        </div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={props.onHide}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n","import React, { useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { GameResult } from \"../engine/worker\";\nimport Chessboard from \"chessboardjsx\";\nimport { PGNModal } from \"./pgnModal\";\nimport { StrategyModal } from \"../strategy/strategyModal\";\nimport { Move } from \"../engine/game\";\n\ninterface IProps {\n  game: (GameResult & { gameIndex: number }) | null;\n}\n\nexport const BoardCard: React.FC<IProps> = (props) => {\n  const [pgnForModal, setPgnForModal] = useState<string | undefined>(undefined);\n  const [strategyForModal, setStrategyForModal] = useState<Move[] | undefined>(\n    undefined\n  );\n  if (!props.game) {\n    return (\n      <Card style={{ height: 500 }}>\n        <Card.Body>\n          <Card.Title>No game selected</Card.Title>\n          <Alert variant={\"info\"}>\n            Select a game from the \"History\" section\n          </Alert>\n        </Card.Body>\n      </Card>\n    );\n  }\n  return (\n    <>\n      <Card style={{ height: 500 }}>\n        <Card.Body>\n          <Card.Title>{`Game ${props.game.gameIndex}`}</Card.Title>\n          <Card.Subtitle>{`${props.game.outcome} by ${props.game.by}`}</Card.Subtitle>\n          <Card.Text>\n            <ButtonGroup>\n              <Button\n                onClick={() => setPgnForModal(props.game?.pgn)}\n                size=\"sm\"\n                variant=\"info\"\n              >\n                PGN\n              </Button>\n              <Button\n                onClick={() => setStrategyForModal(props.game?.whiteStrategy)}\n                size=\"sm\"\n                variant=\"light\"\n              >\n                White strategy\n              </Button>\n              <Button\n                onClick={() => setStrategyForModal(props.game?.blackStrategy)}\n                size=\"sm\"\n                variant=\"dark\"\n              >\n                Black strategy\n              </Button>\n            </ButtonGroup>\n          </Card.Text>\n          <Chessboard\n            width={358}\n            draggable={false}\n            position={props.game.fen}\n            boardStyle={{\n              borderRadius: \"5px\",\n              boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\n            }}\n          />\n        </Card.Body>\n      </Card>\n      <PGNModal\n        pgn={pgnForModal}\n        onHide={() => setPgnForModal(undefined)}\n        show={pgnForModal !== undefined}\n      />\n      <StrategyModal\n        strategy={strategyForModal}\n        onHide={() => setStrategyForModal(undefined)}\n        show={strategyForModal !== undefined}\n      />\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport { PendingSpinner, PlayGameButton } from \"./play-game-button\";\nimport { GameResult } from \"./engine/worker\";\nimport RangeSlider from \"react-bootstrap-range-slider\";\nimport { Move } from \"./engine/game\";\nimport { ALL_POSSIBLE_MOVES } from \"./engine/utils\";\nimport { HistoryCard } from \"./history/historyCard\";\nimport { Title } from \"./title\";\nimport { StrategyCard } from \"./strategy/strategyCard\";\nimport { BoardCard } from \"./board/boardCard\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction App() {\n  const [games, setGames] = useState<GameResult[]>([]);\n\n  const [currentGame, setCurrentGame] = useState<\n    (GameResult & { gameIndex: number }) | null\n  >(null);\n  const [numCurrentlySimulating, setNumCurrentlySimulating] = useState(0);\n  const [nGamesToSimulate, setNGamesToSimulate] = useState(1);\n  const [strategy, setStrategy] = useState<Move[]>(ALL_POSSIBLE_MOVES);\n  const [strategyFor, setStrategyFor] = useState<\"w\" | \"b\" | null>(null);\n\n  return (\n    <>\n      <Container fluid>\n        <Row>\n          <Col>\n            <Title />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <BoardCard game={currentGame} />\n          </Col>\n          <Col>\n            <StrategyCard\n              strategy={strategy}\n              setStrategy={setStrategy}\n              strategyFor={strategyFor}\n              setStrategyFor={setStrategyFor}\n            />\n          </Col>\n          <Col>\n            <HistoryCard\n              games={games}\n              setGames={setGames}\n              setCurrentGame={setCurrentGame}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <PlayGameButton\n              nGamesToSimulate={nGamesToSimulate}\n              onGameComplete={(gameResult) => {\n                setGames((games) => {\n                  return [...games, gameResult];\n                });\n                setNumCurrentlySimulating((prev) => prev - 1);\n              }}\n              onSimulationStart={() =>\n                setNumCurrentlySimulating((prev) => prev + 1)\n              }\n              strategies={{\n                blackMoves: strategyFor === \"b\" ? strategy : undefined,\n                whiteMoves: strategyFor === \"w\" ? strategy : undefined,\n              }}\n            />\n            <PendingSpinner nPending={numCurrentlySimulating} />\n            <div style={{ width: 150 }}>\n              <RangeSlider\n                value={nGamesToSimulate}\n                onChange={(e) =>\n                  setNGamesToSimulate(parseInt(e.target.value, 10))\n                }\n                min={1}\n                max={1000}\n              />\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-base-table/styles.css\";\nimport \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}